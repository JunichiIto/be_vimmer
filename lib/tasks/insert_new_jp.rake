# encoding: UTF-8
namespace :seed do
  desc "Insert New Japanese Descriptions"
  task :insert_new_jp => :environment do
    @lines = <<-EOF.split "\n"
###左右の移動
N  h            左に N 桁移動 ( CTRL-H, <BS>, <Left> キーでも同じ)
N  l            右に N 桁移動 ( <Space>,<Right> キーでも同じ)
0            行の先頭に移動 ( <Home> キーでも同じ)
^            行の先頭(但し空白文字類以外)に移動
N  $            行の末尾に移動。(N-1行、下に移動）( <End> キーでも同じ)
g0           画面上の行の先頭に移動。（複数行にまたがる時の動きが"0"と違います)
g^           画面上の行の先頭(但し空白文字類以外)に移動。（複数行にまたがる時の動きが"^"と違います）
N  g$           行の末尾に移動。(複数行にまたがる時の動きが"$"と違います)
gm           現在行の中央(端末の横幅の半分の桁位置)に移動
N  |            N桁目に移動。(デフォルトは１)
N  f{char}      現在位置から右方向にあるN個目の{char}に移動
N  F{char}      現在位置から左方向にあるN個目の{char}に移動
N  t{char}      現在位置から右方向にあるN個目の{char}の左側に移動
N  T{char}      現在位置から左方向にあるN個目の{char}の右側に移動
N  ;            直前の"f", "F", "t", "T"を N 回繰り返す。
N  ,            直前の"f", "F", "t", "T"を逆方向に N 回繰り返す。
###上下の移動
N  k            上に N 行移動 (CTRL-P, <Up> キーでも同じ)
N  j            下に N 行移動 (CTRL-J, CTRL-N, <NL>, <Down> でも同じ)
N  -            上に N 行移動し、行頭の非空白文字に移動
N  +            下に N 行移動し、行頭の非空白文字に移動(CTRL-M, <CR>キーでも同じ)
N  _            下に N-1 行移動し,行頭の非空白文字に移動 
N  G            N 行目(デフォルトは最後の行)に移動し、行頭の非空白文字に移動
N  gg           N 行目(デフォルトは１行目)に移動し、行頭の非空白文字に移動
N  %            ファイルの N パーセント目に移動。このコマンドは N の指定が必須。無指定の場合は|%|コマンド扱い。
N  gk           画面上で N 行上に移動。(複数行にまたがる行がある場合の動きが"k"と異なる)
N  gj           画面上で N 行下に移動。(複数行にまたがる行がある場合
###テキスト文脈単位の移動

N  w            N 個目の単語分、先に進む
N  W            空白で区切られた単語(=|WORD|) N 個分、先に進む
N  e            N 個目の単語のお尻まで進む
N  E            空白で区切られた単語(=|WORD|) N 個目のお尻まで進む
N  b            N 個目の単語分、前に戻る
N  B            空白で区切られた単語(=|WORD|) N 個分、前に戻る
N  ge           N 個目の単語のお尻まで戻る
N  gE           空白で区切られた単語(=|WORD|) N 個目のお尻まで戻る

N  )            N センテンス(文)分、先に進む
N  (            N センテンス分、前に戻る
N  }            N パラグラフ(段落)分、先に進む
N  {            N パラグラフ分、前に戻る
N  ]]           N セクション(章)分、先に進み、その先頭に移動
N  [[           N セクション(章)分、前に戻り、その先頭に移動
N  ][           N セクション(章)分、先に進み、その末尾に移動
N  []           N セクション(章)分、前に戻り、その末尾に移動
N  [(           N 個目の呼応していない'('まで戻る
N  [{           N 個目の呼応していない'{'まで戻る
N  [m           N 個前のメソッドの先頭まで戻る(Java用)
N  [M           N 個前のメソッドの末尾まで戻る(Java用)
N  ])           N 個目の呼応していない')'まで進む
N  ]}           N 個目の呼応していない'}'まで進む
N  ]m           N 個先のメソッドの先頭まで進む(Java用)
N  ]M           N 個先のメソッドの末尾まで進む(Java用)
N  [#           N 個目の呼応していない"#if"や"#else"まで戻る
N  ]#           N 個目の呼応していない"#else"や"#endif"まで進む
N  [*           N 個前のコメントの先頭まで戻る
N  ]*           N 個先のコメントの末尾まで進む

###パターン検索

N  /{pattern}[/[offset]]<CR>  N 回目の{pattern}を含む個所を下方向に検索
N  ?{pattern}[?[offset]]<CR>  N 回目の{pattern}を含む個所を上方向に検索
N  /<CR>        直前と同じ条件の検索を下方向に対して実施
N  ?<CR>        直前と同じ条件の検索を上方向に対して実施
N  n            直前の検索を再実行
N  N            直前の検索を逆方向に再実行
N  *            カーソル位置にある単語を下方向に検索
N  #            カーソル位置にある単語を上方向に検索
N  g*           "*"と同じだが、部分的な一致を検索
N  g#           "#"と同じだが、部分的な一致を検索
gd           カーソル位置の識別子のローカル宣言に移動
gD           カーソル位置の識別子のグローバル宣言に移動



###マーク

m{a-zA-Z}    現在の場所を {a-zA-Z} としてマーク
`{a-z}       編集中のファイルのマーク{a-z} に移動
`{A-Z}       任意のファイルのマーク{A-Z} に移動
`{0-9}       vimが前回終了した時の場所に移動
``           直前のジャンプコマンドの前の場所に移動
`"           前回このファイルを編集した時の場所に移動
`[           直前に繰作もしくはプットした文字列の先頭に移動
`]           直前に繰作もしくはプットした文字列の末尾に移動
`<           (直前の)ビジュアルエリアの先頭に移動
`>           (直前の)ビジュアルエリアの末尾に移動
`.           このファイルで最後に変更した場所に移動
'{a-zA-Z0-9[]'"<>.}  ` と同じだが、その行の先頭の非空白文字まで移動する点が異なる。
:marks        現在設定されているマークを一覧表示
N  CTRL-O     ジャンプリストの N 番目に古い場所に移動
N  CTRL-I     ジャンプリストの N 番目に新しい場所に移動
:ju[mps]      ジャンプリストを一覧表示

###雑他な移動コマンド

%            呼応するカッコ類("(","[","{")や、コメント、"#if"/"#else"/"#endif"のペアを検索して移動
N  H            画面上で N 行目の最初の非空白文字に移動
M            画面上の真ん中の行の最初の非空白文字に移動
N  L            画面上で下から N 行目の最初の非空白文字に移動

N  go                   現バッファの N バイト目に移動
:[range]go[to] [off]    現バッファの [off] バイト目に移動

###タグの利用

:ta[g][!] {tag}      {tag}で指定したタグにジャンプ
:[count]ta[g][!]     タグリストの[count]番目に新しいタグにジャンプ
CTRL-]            変更がされていない限り、カーソル位置にあるタグにジャンプ
:ts[elect][!] [tag]  タグに合致する一覧を表示し、ジャンプ先を選択
:tj[ump][!] [tag]    指定のタグ [tag] にジャンプ。もし、合致するタグが複数ある時は一覧から選択
:lt[ag][!] [tag]     タグ [tag] にジャンプし、マッチしたタグをロケーションリストに加える。
:tags                タグリストを一覧表示
N  CTRL-T            タグリストの N 番目に古いタグにジャンプ
:[count]po[p][!]     タグリストの [count] 番目に古いタグにジャンプ
:[count]tn[ext][!]   [count] 個分、次のタグにジャンプ
:[count]tp[revious][!]   [count]個分、前のタグにジャンプ
:[count]tr[ewind][!] [count]番目に一致するタグにジャンプ
:tl[ast][!]          直前に一致したタグにジャンプ

:pt[ag] {tag}        {tag}タグを見るためのプレビュー画面を開く
CTRL-W }         CTRL-] と同様だがプレビュー画面にジャンプ
:pts[elect]          ":tselect"と同様だがプレビュー画面にジャンプ
:ptj[ump]            ":tjump"と同様だがプレビュー画面にジャンプ
:pc[lose]            タグプレビュー画面を閉じる。
CTRL-W z         タグプレビュー画面を閉じる。

###スクロール

N  CTRL-E       画面を N 行下方向スクロール(デフォルトは1)
N  CTRL-D       画面を N 行下方向スクロール(デフォルトは画面の半分)
N  CTRL-F       画面を N ページ分下方向スクロール
N  CTRL-Y       画面を N 行分上方向スクロール(デフォルトは1)
N  CTRL-U       画面を N 行分上方向スクロール(デフォルトは画面の半分)
N  CTRL-B       画面を N ページ分上方向スクロール
z<CR> or zt  現在行を画面の１行目にして、再描画
z.    or zz  現在行を画面の中央にして、再描画
z-    or zb  現在行を画面の最下行にして、再描画

###'wrap'がoffになっている時のみ有効
N  zh           画面を N 文字、右へスクロール
N  zl           画面を N 文字、左へスクロール
N  zH           画面桁数の半分だけ、右へスクロール
N  zL           画面桁数の半分だけ、左へスクロール

###文字列の挿入

N  a    カーソル位置の後に文字列を(N回)追加
N  A    現在行の末尾に文字列を(N回)追加
N  i    カーソル位置の前に文字列を(N回)追加(<Insert>も同様)
N  I    現在行の最初の非空白文字の前に文字列を(N回)追加
N  gI   現在行の先頭に文字列を(N回)追加
N  o    現在行の下に新たな行を追加し、文字列を(N回)追加する。
N  O    現在行に新たな行を挿入し、文字列を(N回)追加する。
:star[tinsert][!]    Insertモードを開始する。[!]を指定するとAppendモードとなる。
:startr[eplace][!]   Replaceモードを開始する。[!]を指定すると行末から開始する。

###ビジュアルモード
I    選択している全行の前に、同じ文字列を挿入する。
A    選択している全行の後ろに、同じ文字列を挿入する。

###挿入モードの終了
<Esc>             挿入モードを終わって、通常モードへ復帰
CTRL-C            <Esc>と同様。ただし、短縮形は展開しない
CTRL-O {command}  {command}を実行し、挿入モードへ復帰

###移動
cursor keys       カーソルを上下左右に移動
shift-left/right  １単語ごと左右に移動
shift-up/down     １画面ごと前後に移動
<End>             その行の最終桁に移動
<Home>            その行の先頭桁に移動

###挿入モードでの特殊キー

CTRL-V {char}..   指定の{char}、もしくは10進数指定のバイト値を挿入
<NL> or <CR> or CTRL-M or CTRL-J  改行して、新しい行を作成
CTRL-E            カーソル位置の直下の行の内容を１文字挿入
CTRL-Y            カーソル位置の真上の行の内容を１文字挿入

CTRL-A            直前に挿入した文字列をもう一度挿入
CTRL-@            直前に挿入した文字列をもう一度挿入し、挿入モードから復帰
CTRL-R {0-9a-z%#:.-="}  指定のレジスタの内容を挿入

CTRL-N            カーソルの前にあるキーワードと合致する単語を順方向に検索して挿入
CTRL-P            カーソルの前にあるキーワードと合致する単語を逆方向に検索して挿入
CTRL-X ...        カーソルの前にある単語をいろんな方法で補完する。

<BS> or CTRL-H    カーソルの前の１文字を削除
<Del>             カーソル位置の１文字を削除
CTRL-W            カーソル位置の１単語を削除
CTRL-U            現在行で入力した全部の文字を削除
CTRL-T            'shiftwidth'での指定分のインデントを現在行の行頭に挿入
CTRL-D            'shiftwidth'での指定分のインデントを現在行の行頭から削除
0 CTRL-D          現在行の全インデントを削除
^ CTRL-D          現在行の全インデントを削除。但し、次の行のインデントには影響しない。

###特殊な挿入コマンド

:r [file]       カーソル位置の後ろに [file] の内容を挿入
:r! {command}   カーソル位置の後ろに {command} を実行した結果の標準出力の内容を挿入

###文字列の削除

N  x            カーソル位置及びその後ろの N 文字を削除
N  <Del>        カーソル位置及びその後ろの N 文字を削除
N  X            カーソル位置の前の N 文字を削除
N  d{motion}    {motion}で指定された範囲の文字列を削除
{visual}d       ハイライト化された文字列を削除
N  dd           N 行削除
N  D            (N-1 行後の)行末まで削除
N  J            N-1 行を結合して１行に(<EOL>を削除)
{visual}J       ビジュアルモードで選択された文字列を結合
N  gJ           "J"と同じだが、行の間にスペースを入れない
{visual}gJ      "{visual}J"と同じだが、行の間にスペースを入れない
:[range]d [x]   [range]で指定した範囲の行を削除 [それをレジスタxに]

###文字列のコピーと移動

"{char}       レジスタ{char}を指定。これに続いて、削除コマンドやヤンクコマンド、プットコマンドを指定
:reg          全レジスタの内容を表示
:reg {arg}    {arg}で示されたレジスタの内容を表示
N  y{motion}  {motion}で指定された範囲の文字列をレジスタにヤンク(コピー)
{visual}y  ハイライト化された文字列をレジスタにヤンク
N  yy         N 行をレジスタにヤンク
N  Y          N 行をレジスタにヤンク
N  p          カーソル位置の後にレジスタ内容をN回プット(ペースト)
N  P          カーソル位置の前にレジスタ内容をN回プット(ペースト)
N  ]p         pと同じだが、インデントを現在行に合せる
N  [p         Pと同じだが、インデントを現在行に合せる
N  gp         pと同じだが、挿入した文字列の後にカーソルを移動
N  gP         Pと同じだが、挿入した文字列の後にカーソルを移動

###「変更」とは、文字列を削除し、挿入モードに入ること
N  c{motion}  {motion}で指定した範囲の文字列を変更
{visual}c  ビジュアルモードで選択された文字列を変更
N  cc         N 行を変更
N  S          N 行を変更
N  C          (N-1 行後の)行末までを変更
N  s          N 文字を変更
###文字列の変更

N  r{char}    N 文字を{char}に置換
N  gr{char}   N 文字をレイアウトに影響を与えずに置換
N  R          置換モードへ (入力文字列を N 回繰り返す)
N  gR         仮想置換モードへ。置換モードと同じだが、レイアウトに影響しない。
{visual}r{char}    ビジュアルブロックモード用: 選択範囲の各文字を{char}で、置換

{visual}c  ビジュアルブロックモード用:選ばれている各行の内容を入力した文字列に置き換え
{visual}C  ビジュアルブロックモード用:選ばれている各行の行末までを入力した文字列に置き換え

N  ~          N 文字分の英文字の大文字/小文字を変換し、カーソルを移動
{visual}~     ビジュアルモードで選択された範囲の大文字/小文字を変換
{visual}u     ビジュアルモードで選択された範囲を小文字に変換
{visual}U     ビジュアルモードで選択された範囲を大文字に変換
g~{motion}    {motion}で指定した範囲の大文字/小文字を変換
gu{motion}    {motion}で指定した範囲を小文字に変換
gU{motion}    {motion}で指定した範囲を大文字に変換
{visual}g?    ビジュアルモードで選択した範囲をrot13でエンコードする。
g?{motion}    {motion}で指定した範囲をrot13でエンコードする。

N  CTRL-A     カーソル位置もしくは後ろにある数字にNを加算する
N  CTRL-X     カーソル位置もしくは後ろにある数字からNを減算する

N  <{motion}  {motion}で指定した範囲を'shiftwidth'分、インデントを減らす
N  <<         カレント行から N 行分のインデントを減らす
N  >{motion}  {motion}で指定した範囲を'shiftwidth'分、インデントを増やす
N  >>         カレント行から N 行分のインデントを増やす
N  gq{motion}      {motion}で指定した範囲を'textwidth'で指定した長さにフォーマット
:[range]ce[nter]   [width][range]の行範囲をセンタリング
:[range]le[ft]     [indent][range]の行範囲を([indent] 分)左寄せ
:[range]ri[ght]    [width][range]の行範囲を([width] 桁まで)右寄せ

###複雑な変更処理

N  !{motion}{command}<CR>       {motion}で指定した範囲を{command}の結果出力に置き換え
N  !!{command}<CR>              N 行を{command}の結果出力に置き換え
{visual}!{command}<CR>          ビジュアルモードで選択された範囲を{command}の結果出力に置き換え
:[range]! {command}<CR>         [range] の範囲を{command}の結果出力に置き換え
N  ={motion}                    {motion}で指定した範囲を'equalprg'の結果出力に置き換え
N  ==        N 行を'equalprg'の結果出力に置き換え
{visual}=       ビジュアルモードで選択された範囲を'equalprg'の結果出力に置き換え
:[range]s[ubstitute]/{pattern}/{string}/[g][c]      [range]の範囲の{pattern}を{string}に置換する。[g]を指定すると、見つかった全{pattern}を置換。[c]を指定すると、各置換を確認する。
:[range]s[ubstitute] [g][c]     直前の":s"を新たな範囲とオプションで繰り返す
&         直前の":s"を現在行について繰り返す。(オプションなし)
:[range]ret[ab][!] [tabstop]    'tabstop'の値を変更し、それに従って空白、TABの類を適切な状態にする。

###ビジュアルモード


v            文字単位のビジュアルモードを開始 } カーソルを動かして
V            行単位のビジュアルモードを開始   } 選択した範囲に対し
CTRL-V       矩形単位のビジュアルモードを開始 } コマンドを実行
o            カーソル位置と選択範囲の開始位置を入れ替え
gv           直前の選択範囲を選んだ状態でビジュアルモードを開始

###文字列オブジェクト(ビジュアルモードか、オペレータ指定後)

N  aw           "a word"を選択(単語の前後の空白も削除)
N  iw           "inner word"を選択(正味の単語だけを削除)
N  aW           "a |WORD|"を選択
N  iW           "inner |WORD|"を選択
N  as           "a sentence"を選択
N  is           "inner sentence"を選択
N  ap           "a paragraph"を選択
N  ip           "inner paragraph"を選択
N  ab           "a block"( "[("～"])"の範囲)を選択
N  ib           "inner block" ( "[("～"])"の範囲)を選択
N  aB           "a Block" ( "[{"～"]}"の範囲)を選択
N  iB           "inner Block" ( "[{"～"]}"の範囲)を選択
N  a>        "a <> block"を選択
N  i>        "inner <> block"を選択
N  at        "a tag block" (<aaa> ～ </aaa>)を選択
N  it        "inner tag block" (<aaa> ～ </aaa>)を選択
N  a'        "a single quoted string"を選択
N  i'        "inner single quoted string"を選択
N  a"        "a double quoted string"を選択
N  i"        "inner double quoted string"を選択
N  a`        "a backward quoted string"を選択
N  i`        "inner backward quoted string"を選択


###繰り返しコマンド

N  .         直前のコマンドを繰り返す。(回数はN回となる)
q{a-z}    入力された文字群をレジスタ{a-z}に記録
q{A-Z}    入力された文字群をレジスタ{a-z}に追加して記録
q         記録を終了
N  @{a-z}    レジスタ{a-z}の内容を N 回実行
N  @@        直前の@{a-z} を N 回実行
:@{a-z}   レジスタ{a-z}の内容をExコマンドとみなして、N回実行
:@@       直前の:@{a-z} を N 回実行
:[range]g[lobal]/{pattern}/[cmd]        [range]の中で、指定の{pattern}に合致する各行に対して[cmd]コマンド(デフォルトでは":p")を実行する。
:[range]g[lobal]!/{pattern}/[cmd]       [range]の中で、指定の{pattern}に合致**しない**各行に対して[cmd]コマンド(デフォルトでは":p")を実行する。
:so[urce] {file}        {file}からExコマンドを読み出す。
:so[urce]! {file}       {file}からvimコマンドを読み出す。
:sl[eep] [sec]          [sec] 秒間の間、何もしない
N  gs        N 秒間の間、何もしない

###Undo/Redo コマンド

N  u          最後の N 回分の作業をアンドゥ
N  CTRL-R     最後の N 回分のアンドゥを取り消す(redo)
U          行全体への変更を取り消す

###外部コマンド

:sh[ell]        シェルを起動する
:!{command}     {command}をシェルで起動する
K            カーソル下にある単語を'keywordprg' 外部コマンドで調べる。(デフォルトは"man")

###さまざまなコマンド

CTRL-L       画面の再描画
CTRL-G       現在の(パス名＋)ファイル名とカーソル位置を表示
ga           カーソル位置のASCII文字コードを10進、16進、8進で表示
g8           utf-8エンコーディング用：カーソル下の文字のバイト列を16進で表示する。
g CTRL-G     カーソル桁数、行数、単語数、文字数を表示
CTRL-C       検索中：検索を中止
CTRL-Break   MS-DOS: 検索中：検索を中止
<Del>        回数指定中: 最後の文字を削除
:ve[rsion]      バージョン情報を表示
:mode N         MS-DOS: 画面モードを N (数字,C80,C4350,など)に

:norm[al][!]     {commands}通常モードコマンドを実行
Q               "Ex"モードに移行

:redir >{file}          メッセージを{file}にリダイレクト
:silent[!] {command}    {command} を寡黙に実行
:confirm {command}      終了時、保存時などに保存していない変更やリードオンリーの確認をする
:browse {command}       ファイルを開く時や保存する時に選択ダイアログ画面を使う。

###コマンドラインの編集

<Esc>              コマンドラインを破棄する('wildchar'が<Esc>の場合は２回押す)

CTRL-V {char}      {char}を文字として挿入する(CTRL文字など)
CTRL-V {number}    文字コードを10進数入力する(最大３桁まで)
CTRL-R {0-9a-z"%#:-=}   レジスタの内容を挿入する

<Left>/<Right>     カーソルを左右に移動
<S-Left>/<S-Right>   カーソルを単語単位で左右に移動
CTRL-B/CTRL-E      カーソルを行頭、行末に移動

<BS>               カーソルの直前の文字を削除
<Del>              カーソル位置の文字を削除
CTRL-W             カーソルの直前の文字を削除
CTRL-U             全文字を削除

<Up>/<Down>        現在のコマンドで始まるコマンドラインの履歴を呼び出す
<S-Up>/<S-Down>    コマンドラインの履歴を呼び出す
:his[tory]         コマンドライン履歴を表示

###コマンドラインの編集/文脈依存の補完機能

CTRL-D          現在のカーソルの直前のパターンに合致する全ての名前の一覧を表示
CTRL-A          現在のカーソルの直前のパターンに合致する全ての名前を挿入
CTRL-L          現在のカーソルの直前のパターンに合致するもののうち、共通部分を挿入

###Exコマンドの範囲

,               ２つの行の範囲
;               同上。最初の指定行から次の指定範囲まで

{number}        ファイル中の行番号
.               現在行
$               ファイルの最終行
%               1,$と同じ(＝ファイル全体)
*               '<,'>と同じ(＝ビジュアルモードの選択範囲)
't              マーク t の行
/{pattern}[/]   {pattern} に合致する行の次の行
?{pattern}[?]   {pattern} に合致する行の前の行

+[num]          直前の行指定(デフォルト:1)に[num]を加算したもの
-[num]          直前の行指定(デフォルト:1)から[num]を減算したもの

###特殊な Ex 文字

|           コマンドを２つに分割 (":global"と":!"では使用不可)
"           コメントの開始

%           現在のファイル名(ファイル名を使うべき場所でのみ可)
#[num]      別のファイル名[num] (ファイル名を使うべき場所でのみ可)


###!ありの場合: 現在のバッファに対する変更は破棄して、コマンド実行
:e[dit][!] {file}    {file}を編集
:e[dit][!]           現在のバッファ内容を再読み込み
:ene[w][!]           新たな名前なしバッファを編集
:fin[d][!] {file}    {file} を'path' から探し、編集
###ファイルの編集
N   CTRL-^           別ファイル N を編集(":e #N"と同じ)
gf  or ]f        カーソル下にある名前のファイルを編集
:pwd                 カレントディレクトリを表示
:cd [path]           カレントディレクトリを [path] に変更
:cd -                直前のカレントディレクトリに戻る
:f[ile]              現在のファイル名とカーソル位置を表示
:f[ile] {name}       現在のファイル名を{name}に変更
:files               別ファイル一覧を表示

###保存と終了

:[range]w[rite][!]            現在のファイルに保存
:[range]w[rite] {file}        {file}がなければ、{file}に保存。
:[range]w[rite]! {file}       {file}に保存。ファイルがあれば上書き。
:[range]w[rite][!] >>         現在のファイルに追記
:[range]w[rite][!] >> {file}    {file}に追記
:[range]w[rite] !{cmd}        [range]の行を標準入力として{cmd}を実行。
:[range]up[date][!]           変更されていれば、上書き保存
:wa[ll][!]                    変更のある全バッファを上書き保存

:q[uit]               変更がなければ、現在のバッファを終了。他にヘルプ以外のバッファがなければvimを終了。
:q[uit]!              変更を破棄して、現在のバッファを終了。他にヘルプ以外のバッファがなければvimを終了。
:qa[ll]               変更がない限りvimを終了
:qa[ll]!              変更があってもvimを強制終了 
:cq                   保存せずに終了し、エラーコードを返す。

:wq[!]                現ファイルを保存して終了
:wq[!] {file}         {file}に保存して終了
:x[it][!] [file]      ":wq"と同様だが、変更が加わっている場合のみ保存
ZZ                 ":x"と同じ
ZQ                 ":q!"と同じ
:xa[ll][!]  or :wqall[!]        変更のある全バッファを保存して終了

:st[op][!]            vimをサスペンドし、新たなシェルを起動。'aw'オプションがONで、[!]も指定していない場合はバッファを保存
CTRL-Z             ":stop"と同じ。

###複数ウィンドウコマンド

CTRL-W s  or  :split    ウィンドウを２つに分割
:split {file}           ウィンドウを２つに分割し、片方で{file}を開く
:vsplit {file}          同上。ウインドウは縦分割。
:vertical {cmd}         {cmd}が縦分割するようにする
:sf[ind] {file}         ウィンドウを分割し、{file}を'path'中で探し、それを編集
CTRL-W ]                ウィンドウを分割し、カーソル下のタグにジャンプ
CTRL-W f                ウィンドウを分割し、カーソル下のファイルにジャンプ
CTRL-W ^                ウィンドウを分割し、別ファイルにジャンプ
CTRL-W n  or  :new      新たな空ウィンドウを作成
CTRL-W q  or  :q[uit]   編集を終了しウィンドウを閉じる
CTRL-W c  or  :cl[ose]      バッファを隠しウィンドウを閉じる
CTRL-W o  or  :on[ly]   画面を現在ウィンドウ１つだけにする

CTRL-W j                カーソルを下のウィンドウに移動
CTRL-W k                カーソルを上のウィンドウに移動
CTRL-W CTRL-W           カーソルを下のウィンドウに移動(wrap)
CTRL-W W                カーソルを上のウィンドウに移動(wrap)
CTRL-W t                カーソルを一番上のウィンドウに移動
CTRL-W b                カーソルを一番下のウィンドウに移動
CTRL-W p                カーソルを直前のアクティブウィンドウに移動

CTRL-W r                ウィンドウを下側にローテートする。
CTRL-W R                ウィンドウを上側にローテートする。
CTRL-W x                現在のウィンドウを次のウィンドウと入れ換え

CTRL-W =                全ウィンドウの高さを同一に
CTRL-W -                現在のウィンドウの高さを減らす
CTRL-W +                現在のウィンドウの高さを増やす
CTRL-W _                現在のウィンドウの高さを変更する(デフォルト:最大)

###バッファ管理コマンド

:buffers  or  :files    全バッファとファイル名の一覧

:ball     or  :sball    全引数/バッファを編集
:unhide   or  :sunhide    読み込み中の全バッファを編集

:badd {fname}           ファイル名{fname}をバッファ一覧に追加
:bunload[!] [N]         [N]番バッファをメモリから開放
:bdelete[!] [N]         [N]番バッファを開放してバッファ一覧から削除


###シンタックスハイライト

:syntax on              シンタックスハイライトの使用開始
:syntax off             シンタックスハイライトの使用停止

:syntax [list]          現在のシンタックスのアイテムを一覧する
:syntax clear           全てのシンタックスを削除する

:highlight clear        全てのハイライトを削除する

:filetype on            ファイルタイプの検出を有効にするシンタックスハイライトは有効にならない
:filetype plugin indent onファイルタイプの検出を有効にする各設定とオートインデントを有効にする


###折り畳みコマンド

set foldmethod=manual   手動で折畳み
set foldmethod=indent   インデントで折畳み
set foldmethod=expr     'foldexpr'で折畳み
set foldmethod=syntax   シンタックスのリージョンで折畳み
set foldmethod=marker   'foldmarker'で折畳み

zf{motion}              手動で折畳みを定義する
:{range}fold            {range}範囲の行を折畳む
zd                      カーソル下の1つの折畳みを削除する
zD                      カーソル下の全ての折畳みを削除する

zo                      カーソル下の折畳みを1段開く
zO                      カーソル下の折畳みを全段開く
zc                      カーソル下の折畳みを1段閉じる
zC                      カーソル下の折畳みを全段閉じる

zm                      'foldlevel'を減らし、折畳みを増やす
zM                      'foldlevel'を0にし、全て折畳む
zr                      'foldlevel'を増やし、折畳を減らす
zR                      'foldlevel'を最大にし、全て開く

zn                      'foldenable'を無効にし、折畳み無し
zN                      'foldenable'を有効にし、折畳む
zi                      'foldenable'を反転させる
EOF

    @lines.each do |line|
      if /^###/ =~ line
        label = line.sub /###/, ""
        @mode = Mode.where(label: label).first_or_create!
      elsif m = /^(?<command>((N +)?[\x21-\x7e]+ ?)+)(?<desc>.+)/.match(line)
        command = m["command"].strip
        desc = m["desc"].strip
        desc = desc.sub(/^\d +/, "")
        #if desc.strip.empty? || /^不用/ =~ desc
        #  next
        #end
        puts "Mode: #{@mode.label} Create Command:#{command} → #{desc}"
        @mode.vim_commands.create! command: command, description: desc, language: 'jp'
      end
    end
  end
end

