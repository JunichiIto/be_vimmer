# coding: utf-8
@lines = <<-EOF.split "\n"
###挿入モード
CTRL-@          直前に挿入したテキストを挿入し、挿入モードを 終了する。
CTRL-A          直前に挿入したテキストを挿入する。
CTRL-B          未使用 |i_CTRL-B-gone|
CTRL-C          'insertmode' がセットされていなければ、短縮入 力をチェックせずに挿入モードを終了する。
CTRL-D          現在の行から shiftwidth 分のインデントを削除 する。
CTRL-E          下の行のカーソルと同じ位置にある文字を挿入する
CTRL-F          未使用 (しかし標準設定では'cinkeys'の設定によ りカーソル行を再インデントするのに使用される)
CTRL-G CTRL-J   下の行へ移動。カーソルは挿入開始位置と同じ列へ
CTRL-G j        下の行へ移動。カーソルは挿入開始位置と同じ列へ
CTRL-G <Down>   下の行へ移動。カーソルは挿入開始位置と同じ列へ
CTRL-G CTRL-K   上の行へ移動。カーソルは挿入開始位置と同じ列へ
CTRL-G k        上の行へ移動。カーソルは挿入開始位置と同じ列へ
CTRL-G <Up>     上の行へ移動。カーソルは挿入開始位置と同じ列へ
CTRL-G u        アンドゥで元に戻す地点を新たに設定
<BS>            カーソルの前にある文字を削除する。
{char1}<BS>{char2} 二重字(digraph)を入力する。 ('digraph' オプ ションがオンのとき)
CTRL-H          <BS> と同じ
<Tab>           <Tab> 文字を挿入
CTRL-I          <Tab> と同じ
<NL>            <CR> と同じ
CTRL-J          <CR> と同じ
CTRL-K {char1} {char2} 二重字(digraph)を入力する。
CTRL-L          'insertmode'がオンのとき、挿入モードを終了する
<CR>            改行を入力。
CTRL-M          <CR> と同じ。
CTRL-N          カーソルの前にあるキーワードで前方検索し、一致 した単語で補完する。
CTRL-O          1回コマンドを実行し、挿入モードに戻る。
CTRL-P          カーソルの前にあるキーワードで後方検索し、一致 した単語で補完する。
CTRL-Q          CTRL-V と同じ。端末制御に使用されている場合を 除く。
CTRL-R {0-9a-z"%#*:=} レジスタに保存されている文字列を挿入。
CTRL-R CTRL-R {0-9a-z"%#*:=} レジスタに保存されている文字列そのものを挿入。
CTRL-R CTRL-O {0-9a-z"%#*:=} レジスタに保存されている文字列そのものを挿入。 インデントは挿入しない。
CTRL-R CTRL-P {0-9a-z"%#*:=} レジスタに保存されている文字列そのものを挿入。 インデントは固定。
CTRL-S          (端末制御に使用)
CTRL-T          現在の行に shiftwidth 分のインデントを挿入する。
CTRL-U          現在の行に挿入したすべての文字を削除する。
CTRL-V {char}   続いて入力する数字以外の文字をそのまま挿入する
CTRL-V {number} 続いて入力する3桁の10進数で1バイト文字を指定 して挿入
CTRL-W          カーソルの前にある単語を削除する。
CTRL-X {mode}   CTRL-X サブモードに移行する。 詳しくは|i_CTRL-X_index|を参照。
CTRL-Y          上の行のカーソルと同じ位置にある文字を挿入する
CTRL-Z          'insertmode' がセットされている場合: Vim をサ スペンドする。
<Esc>           挿入モードを終了する。('insertmode' がセットさ れていない場合)
CTRL-[          <Esc> と同じ。
CTRL-\ CTRL-N ノーマルモードへ移行。
CTRL-\ CTRL-G 'insertmode'に合わせたモードへ移行。
CTRL-\ a - z    将来の拡張のために予約。
CTRL-\ others   未使用
CTRL-]          短縮入力を適用する
CTRL-^          マップ|:lmap|の有効無効を切り替える
CTRL-_          'allowrevins' がオンのとき、言語を切り替える。 (ヘブライ語、ペルシア語) {コンパイル時に |+rightleft| オプションを有効にしたときのみ}
<Space> to '~'  未使用。ただし CTRL-D が後に続く '0' と '^' は 除く。
0 CTRL-D        現在の行の全インデントを削除する。
^ CTRL-D        現在の行の全インデントを削除し、次の行に復元。
<Del>           カーソル位置の文字を削除。
Meta characters (0x80 to 0xff, 128 to 255) 未使用
<Left>          カーソルを1文字左へ移動。
<S-Left>        カーソルを1単語左へ移動。
<C-Left>        カーソルを1単語左へ移動。
<Right>         カーソルを1文字右へ移動。
<S-Right>       カーソルを1単語右へ移動。
<C-Right>       カーソルを1単語右へ移動。
<Up>            カーソルを1行上へ移動。
<S-Up>          <PageUp> と同じ。
<Down>          カーソルを1行下へ移動。
<S-Down>        <PageDown> と同じ。
<Home>          カーソルを行の先頭へ移動。
<C-Home>        カーソルを行の先頭へ移動。
<End>           カーソルを行末へ移動。
<C-End>         カーソルを行末へ移動。
<PageUp>        1画面上へスクロール。
<PageDown>      1画面下へスクロール。
<F1>            <Help> と同じ。
<Help>          挿入モードを終了し、ヘルプウィンドウを表示する。
<Insert>        挿入/上書きモードをトグルする。
<LeftMouse>     カーソルをマウスクリックした位置へ移動。
<ScrollWheelDown>       ウィンドウを3行下へ
<S-ScrollWheelDown>     ウィンドウを1画面下ヘ
<ScrollWheelUp>         ウィンドウを3行上へ
<S-ScrollWheelUp>       ウィンドウを1画面上へ
<ScrollWheelLeft>       ウィンドウを6列左へ
<S-ScrollWheelLeft>     ウィンドウを1画面左へ
<ScrollWheelRight>      ウィンドウを6列右へ
<S-ScrollWheelRight>   ウィンドウを1画面右へ
###ノーマルモード
CTRL-@             未使用
CTRL-A          2  カーソル位置/カーソルより後ろにある数字に N を加える。
CTRL-B          1  ウィンドウを N 画面上へスクロール。
CTRL-C             現在の(検索)コマンドを中断する。
CTRL-D             ウィンドウを N 行下へスクロールする。 (省略時は半画面)
CTRL-E             ウィンドウを N 行下へスクロールする。
CTRL-F          1  ウィンドウを N 画面下へスクロール。
CTRL-G             現在のファイル名とカーソル位置を表示する。
<BS>            1  "h" と同じ。
CTRL-H          1  "h" と同じ。
<Tab>           1  N 個先のジャンプリストの場所へジャンプする。
CTRL-I          1  <Tab> と同じ。
<NL>            1  "j" と同じ。
CTRL-J          1  "j" と同じ。
CTRL-K             未使用
CTRL-L             画面の再描画。
<CR>            1  カーソルを N 行下の先頭の CHAR へ移動。
CTRL-M          1  <CR> と同じ。
CTRL-N          1  "j" と同じ。
CTRL-O          1  N 個前のジャンプリストの場所へジャンプする。
CTRL-P          1  "k" と同じ。
CTRL-Q             (端末制御に使用)
CTRL-R          2  'u' でアンドゥした変更をリドゥする。
CTRL-S             (端末制御に使用)
CTRL-T             N 個前のタグリストの場所へジャンプする。
CTRL-U             ウィンドウを N 行上へスクロール。 (省略時は半画面)
CTRL-V             ブロック指定のビジュアルモードを開始する。
CTRL-W {char}      ウィンドウコマンド、|CTRL-W| を参照。
CTRL-X          2  カーソル位置/カーソルより後ろにある数字に N を減じる。
CTRL-Y             ウィンドウを N 行下へスクロール。
CTRL-Z             Vim の実行を中断。(新しいシェルを開始する)
CTRL-[ <Esc>       未使用
CTRL-\ CTRL-N      ノーマルモードへ移行。(つまり何もしない)
CTRL-\ CTRL-G      'insertmode'に合わせたモードへ移行。
CTRL-\ a - z       将来の拡張のために予約。
CTRL-\ others      未使用
CTRL-]             カーソル位置の単語を :ta で検索する。
CTRL-^             N 番目のファイルを編集する。(":e #N" と同じ)
CTRL-_             未使用
<Space>         1  "l" と同じ。
!{motion}{filter} 2  Nmove のテキストを {filter} コマンドでフィルタする。
!!{filter}      2  N 行を {filter} コマンドでフィルタする。
"{a-zA-Z0-9.%#:-"}  削除、ヤンク、プットコマンドでレジスタ{a-zA-Z0-9.%#:-"} (大文字は既存のレジスタに追加する)を指定するために使用する。({.%#:}はプットコマンドでのみ有効)
#               1  カーソル位置の単語で後方検索し、N 番目に見つかった場所へ移動。
$               1  カーソルを N 行下の行末へ移動。
%               1  現在の行にある次の括弧やC風コメント(/* */)の対、対応するプリプロセッサなどに移動
{count}%        1  ファイルの N パーセントの位置に移動。
&               2  最後に実行した :s コマンドを繰り返す。
'{a-zA-Z0-9}    1  {a-zA-Z0-9} でマークした行の先頭の CHAR へカーソルを移動。
''              1  最後のジャンプの前にいた行の先頭の CHAR へカーソルを移動。
'(              1  現在の文の文頭がある行の先頭の CHAR へ移動
')              1  現在の文の文末がある行の先頭の CHAR へ移動
'<              1  カレントバッファで選択されていた選択範囲の最初の行の先頭の CHAR へカーソルを移動。
'>              1  カレントバッファで選択されていた選択範囲の最後の行の先頭の CHAR へカーソルを移動。
'[              1  最後に編集したテキストまたは挿入したテキストの先頭行の先頭の CHAR へカーソルを移動。
']              1  最後に編集したテキストまたは挿入したテキストの末尾行の先頭の CHAR へカーソルを移動。
'{              1  現在の段落の最初の行の先頭の CHAR へ移動
'}              1  現在の段落の最後の行の先頭の CHAR へ移動
(               1  カーソルを N 文だけ戻す。
)               1  カーソルを N 文だけ先に進める。
*               1  カーソル位置の単語を前方検索し、N 番目に見つかった位置へ移動。
+               1  <CR>と同じ。
,               1  最後に実行した f, t, F または T コマンドを逆向きに N 回繰り返す。
-               1  カーソルを N 行上の先頭の CHAR へ移動。
.               2  最後の編集を N 回繰り返す。
/{pattern}<CR>  1  {pattern} で前方検索し、N 番目に見つかった位置へ移動。
/<CR>           1  最後の検索の {pattern} で前方検索。
0               1  カーソルを行頭文字へ移動。
1,2,3,4,5,6,7,8,9                  カウントを指定するためにコマンドの前に入力
:               1  Ex コマンドの入力開始。
{count}:           カレント行から N-1 行下の行までの範囲で有効となる Ex コマンドの入力開始。
;               1  最後の f, t, F または T を N 回繰り返す。
<{motion}       2  Nmove の行を 'shiftwidth' 分だけ左へシフト。
<<              2  N 行を 'shiftwidth' 分だけ左へシフト。
={motion}       2  Nmove の行のインデントを調整する。
==              2  N 行のインデントを調整する。
>{motion}       2  Nmove の行を 'shiftwidth' 分だけ右へシフト。
>>              2  N 行を 'shiftwidth' 分だけ右へシフト。
?{pattern}<CR>  1  {pattern} で後方検索し、N 番目に見つかった位置へ移動。
?<CR>           1  最後の検索の {pattern} で後方検索。
@{a-z}          2  レジスタ {a-z} の内容を N 回実行する。
@:                 最後の ":" コマンドを N 回実行する。
@@              2  最後の @{a-z} コマンドを N 回実行する。
A               2  行末に N 回テキストを追加する。
B               1  カーソルを N WORD だけ戻す。
["x]C           2  カーソル位置から行末までと続く N-1 行のテキストを削除し[バッファ x に保存して]、テキストを入力する; "c$" と同じ。
["x]D           2  カーソル位置から行末までと続く N-1 行のテキストを削除する[バッファ x に保存する]; "d$"と同じ。
E               1  カーソルを N 先の WORD の末尾へ移動。
F{char}         1  カーソルを左方向へ N 個目の {char} に移動。
G               1  カーソルを N 行目に移動、省略時は最後の行。
H               1  カーソルを画面の上から N 行目に移動。
I               2  行の先頭の CHAR の前に N 回テキストを挿入。
J               2  N 行結合。省略時は2行。
K                  カーソル位置のキーワードを 'keywordprg' で調べる。
L               1  カーソルを画面の下から N 行目に移動。
M               1  カーソルを画面の中央の行に移動。
N               1  最後に実行した '/' または '?' を逆方向に N回実行する。
O               2  カーソルの上に新規に行を挿入し、テキストを入力、N 回繰り返す。
["x]P           2  カーソルの前に[バッファ x の]テキストを N回挿入する。
Q                  "Ex" モードに移行する。
R               2  上書きモードに移行する: 今ある文字を上書きする、入力したテキストを N-1 回繰り返す。
["x]S           2  N 行削除し[バッファ x に保存]、テキストの挿入開始; "cc"と同じ。
T{char}         1  カーソルを左方向へ N 個目の {char} の直後まで移動。
U               2  1行中の最近の変更をすべて取り消す。
V                  行指定のビジュアルモードを開始する。
W               1  カーソルを N WORD 先に進める。
["x]X           2  カーソルの前にある N 文字を削除する[バッファx に保存]。
["x]Y              N 行[バッファ x に]ヤンクする; "yy" と同じ。
ZZ                 カレントファイルが編集されていたら、保存して編集を終了する。
ZQ                 カレントファイルの編集を終了する。
[{char}            大括弧コマンド (下の|[|を参照)
\                  未使用
]{char}            大括弧コマンド (下の|]|を参照)
^               1  カーソルを行の先頭の CHAR へ移動。
_               1  カーソルを N-1 行下の先頭の CHAR へ移動。
`{a-zA-Z0-9}    1  カーソルをマーク {a-zA-Z0-9} へ移動。
`(              1  現在の文の文頭へ移動
`)              1  現在の文の文末へ移動
`<              1  最後に選択されていた選択範囲の先頭に移動
`>              1  最後に選択されていた選択範囲の末尾に移動
`[              1  最後に編集したテキストまたは挿入したテキストの先頭へカーソルを移動。
`]              1  最後に編集したテキストまたは挿入したテキストの末尾へカーソルを移動。
``              1  最後のジャンプの前にいた位置へカーソルを移動。
`{              1  現在の段落の最初へ移動
`}              1  現在の段落の最後へ移動
a               2  カーソルの直後に N 回テキストを追加する。
b               1  カーソルを N ワードだけ戻す。
["x]c{motion}   2  Nmove のテキストを削除[バッファ x に保存]し、挿入モードへ移行。
["x]cc          2  N 行削除[バッファ x に保存]し、挿入モードへ移行。
["x]d{motion}   2  Nmove のテキストを削除[バッファ x に保存]。
["x]dd          2  N 行削除[バッファ x に保存]。
do              2  ":diffget" と同じ。
dp              2  ":diffput" と同じ。
e               1  カーソルを N 先のワードの末尾へ移動。
f{char}         1  カーソルを右方向へ N 個目の {char} に移動。
g{char}            拡張コマンド、下の|g|を参照。
h               1  カーソルを左へ N 文字移動。
i               2  カーソルの直前に N 回テキストを挿入する。
j               1  カーソルを N 行下へ移動する。
k               1  カーソルを N 行上へ移動する。
l               1  カーソルを右へ N 文字移動。
m{A-Za-z}          カーソル位置にマーク {A-Za-z} をセットする。
n               1  最後の '/' or '?' を N 回繰り返す。
o               2  カーソルの下に新規に行を挿入し、テキストを入力、N 回繰り返す。
["x]p           2  カーソルの後に[バッファ x の]テキストを N回挿入する。
q{0-9a-zA-Z"}      入力した文字をレジスタ {0-9a-zA-Z"} に記録する。(大文字なら既存のレジスタに追加)
q                  (記録中なら) レジスタへの記録を終了する。
q:                 コマンドラインウィンドウで : のコマンドラインを編集する。
q/                 コマンドラインウィンドウで / のコマンドラインを編集する。
q?                 コマンドらインウィンドウで ? のコマンドラインを編集する。
r{char}         2  N 文字を {char} で置き換える。
["x]s           2  (置換) N 文字削除[バッファ x に保存]し、挿入モードに移行。
t{char}         1  カーソルを右方向へ N 個目の {char} の直前まで移動。
u               2  変更をアンドゥ。
v                  文字指定のビジュアルモードを開始する。
w               1  カーソルを N ワード先へ移動。
["x]x           2  カーソル位置と直後の N 文字を削除[バッファx に保存]
["x]y{motion}      Nmove のテキストを[バッファ x へ]ヤンク。
["x]yy             N 行[バッファ x へ]ヤンク。
z{char}            'z'で始まるコマンドの実行。下記参照|z|
{               1  カーソルを N 段落戻す。
|               1  カーソルを N カラムへ移動。
}               1  カーソルを N 段落進める。
~               2  'tildeop' オフ: カーソル位置の N 文字の大文字小文字を逆転し、カーソルを右へ N 文字移動する。
~{motion}          'tildeop' オン: Nmove のテキストの大文字小文字を逆転する。
<C-End>         1  "G" と同じ。
<C-Home>        1  "gg" と同じ。
<C-Left>        1  "b" と同じ。
<C-LeftMouse>      マウスクリック位置のキーワードで ":ta" を実行する。
<C-Right>       1  "w" と同じ。
<C-RightMouse>    "CTRL-T" と同じ。
["x]<Del>       2  "x" と同じ。
{count}<Del>       入力した {count} から最後の数字を削除する。
<Down>          1  "j" と同じ。
<End>           1  "$" と同じ。
<F1>               <Help> と同じ。
<Help>             ヘルプウィンドウを開く。
<Home>          1  "0" と同じ。
<Insert>        2  "i" と同じ。
<Left>          1  "h" と同じ。
<LeftMouse>     1  カーソルをマウスクリック位置へ移動。
<MiddleMouse>   2  マウスクリック位置で実行した "gP" と同じ。
<PageDown>         CTRL-F と同じ。
<PageUp>           CTRL-B と同じ。
<Right>         1  "l" と同じ。
<RightMouse>       ビジュアルモードを開始、カーソルをマウスクリック位置へ移動。
<S-Down>        1  CTRL-F と同じ。
<S-Left>        1  "b" と同じ。
<S-LeftMouse>      マウスクリック位置で実行した "*" と同じ。
<S-Right>       1  "w" と同じ。
<S-RightMouse>    マウスクリック位置で実行した "#" と同じ。
<S-Up>          1  CTRL-B と同じ。
<Undo>          2  "u" と同じ。
<Up>            1  "k" と同じ。
<ScrollWheelDown>       ウィンドウを3行下へ
<S-ScrollWheelDown>     ウィンドウを1画面下へ
<ScrollWheelUp>         ウィンドウを3行上へ
<S-ScrollWheelUp>       ウィンドウを1画面上へ
<ScrollWheelLeft>       ウィンドウを6列左へ
<S-ScrollWheelLeft>     ウィンドウを1画面左へ
<ScrollWheelRight>      ウィンドウを6列右へ
<S-ScrollWheelRight>    ウィンドウを1画面右へ
###テキストオブジェクト
a"                 ダブルクォートで囲まれた文字列
a'                 シングルクォートで囲まれた文字列
a(                 ab と同じ。
a)                 ab と同じ。
a<                 "a <>" '<' から '>' までを選択。
a>                 a< と同じ。
aB                 "a Block" "[{" から "]}" までを選択(括弧を含む)。
aW                 "a WORD" (ホワイトスペースを含む)
a[                 "a []" '[' から ']' までを選択。
a]                 a[ と同じ。
a`                 バッククォートで囲まれた文字列
ab                 "a block" "[(" から "])" までを選択(括弧を含む)。
ap                 "a paragraph" (ホワイトスペースを含む)
as                 "a sentence" (ホワイトスペースを含む)
at                 "a tag block" (ホワイトスペースを含む)
aw                 "a word" (ホワイトスペースを含む)
a{                 aB と同じ。
a}                 aB と同じ。
i"                 ダブルクォートで囲まれた文字列。ダブルクォートは含まない。
i'                 シングルクォートで囲まれた文字列。シングルクォートは含まない。
i(                 ib と同じ。
i)                 ib と同じ。
i<                 "inner <>" '<' から '>' までを選択。
i>                 i< と同じ。
iB                 "inner Block" "[{" から "]}" までを選択。
iW                 "inner WORD"
i[                 "inner []" '[' から ']' までを選択。
i]                 i[ と同じ。
i`                 バッククォートで囲まれた文字列。バッククォートは含まない。
ib                 "inner block" "[(" から "])" までを選択。
ip                 "inner paragraph"
is                 "inner sentence"
it                 "inner tag block"
iw                 "inner word"
i{                 iB と同じ。
i}                 iB と同じ。
###ウィンドウコマンド
CTRL-W CTRL-B      "CTRL-W b" と同じ。
CTRL-W CTRL-C      "CTRL-W c" と同じ。
CTRL-W CTRL-D      "CTRL-W d" と同じ。
CTRL-W CTRL-F      "CTRL-W f" と同じ。
CTRL-W CTRL-G      "CTRL-W g .." と同じ。
CTRL-W CTRL-H      "CTRL-W h" と同じ。
CTRL-W CTRL-I      "CTRL-W i" と同じ。
CTRL-W CTRL-J      "CTRL-W j" と同じ。
CTRL-W CTRL-K      "CTRL-W k" と同じ。
CTRL-W CTRL-L      "CTRL-W l" と同じ。
CTRL-W CTRL-N      "CTRL-W n" と同じ。
CTRL-W CTRL-O      "CTRL-W o" と同じ。
CTRL-W CTRL-P      "CTRL-W p" と同じ。
CTRL-W CTRL-Q      "CTRL-W q" と同じ。
CTRL-W CTRL-R      "CTRL-W r" と同じ。
CTRL-W CTRL-S      "CTRL-W s" と同じ。
CTRL-W CTRL-T      "CTRL-W t" と同じ。
CTRL-W CTRL-V      "CTRL-W v" と同じ。
CTRL-W CTRL-W      "CTRL-W w" と同じ。
CTRL-W CTRL-X      "CTRL-W x" と同じ。
CTRL-W CTRL-Z      "CTRL-W z" と同じ。
CTRL-W CTRL-]      "CTRL-W ]" と同じ。
CTRL-W CTRL-^      "CTRL-W ^" と同じ。
CTRL-W CTRL-_      "CTRL-W _" と同じ。
CTRL-W +           カレントウィンドウの高さを N 行高くする。
CTRL-W -           カレントウィンドウの高さを N 行低くする。
CTRL-W <           カレントウィンドウの幅を N 列狭める
CTRL-W =           すべてのウィンドウの高さと幅を同じにする。
CTRL-W >           カレントウィンドウの幅を N 列広くする。
CTRL-W H           カレントウィンドウを最も左に移動する。
CTRL-W J           カレントウィンドウを最も下に移動する。
CTRL-W K           カレントウィンドウを最も上に移動する。
CTRL-W L           カレントウィンドウを最も右に移動する。
CTRL-W P           プレビューウィンドウへ移動する。
CTRL-W R           ウィンドウ位置を後方へ N 回転させる。
CTRL-W S           "CTRL-W s" と同じ。
CTRL-W T           カレントウィンドウを新しいタブページへ移動。
CTRL-W W           上から N 番目のウィンドウに移動。N の指定がなければ、カレントウィンドウの上のウィンドウ(なければ一番下のウィンドウ)に移動。
CTRL-W ]           ウィンドウを分割してカーソル位置のタグへジャンプする。
CTRL-W ^           カレントウィンドウを分割し、N 番目のファイルを編集する。
CTRL-W _           カレントウィンドウの高さを N 行にする(省略時は可能な限り高く)。
CTRL-W b           一番下のウィンドウへ移動。
CTRL-W c           カレントウィンドウを閉じる(|:close| と同じ)。
CTRL-W d           ウィンドウを分割し、カーソル位置の定義へジャンプする。
CTRL-W f           ウィンドウを分割し、カーソル位置のファイル名のファイルを編集する。
CTRL-W F           ウィンドウを分割し、カーソル位置のファイル名のファイルを開き、ファイル名の後に書かれた行番号にジャンプする。
CTRL-W g CTRL-]  ウィンドウを分割し、カーソル位置のタグに対し |:tjump| を実行する。
CTRL-W g ]         ウィンドウを分割し、カーソル位置のタグに対し |:tselect| を実行する。
CTRL-W g }         カーソル位置のタグに対し |:ptjump| を実行する。
CTRL-W g f         カーソル位置のファイル名のファイルを新しいタブページで開く。
CTRL-W g F         カーソル位置のファイル名のファイルを新しいタブページで開き、ファイル名の後に書かれた行番号にジャンプする。
CTRL-W h           N 個左のウィンドウに移動(一番左のウィンドウでストップ)
CTRL-W i           ウィンドウを分割し、カーソル位置の識別子の宣言位置へジャンプする。
CTRL-W j           N 個下のウィンドウに移動(一番下のウィンドウでストップ)
CTRL-W k           N 個上のウィンドウに移動(一番上のウィンドウでストップ)
CTRL-W l           N 個右のウィンドウに移動(一番右のウィンドウでストップ)
CTRL-W n           高さが N 行の新しいウィンドウを開く。
CTRL-W o           カレントウィンドウを除くすべてのウィンドウを閉じる(|:only| と同じ)。
CTRL-W p           直前の(最後にアクセスしていた)ウィンドウへ移動。
CTRL-W q           カレントウィンドウを終了する(|:quit| と同じ)。
CTRL-W r           ウィンドウ位置を後方へ N 回転させる。
CTRL-W s           カレントウィンドウを2つに分割し、高さが N行の新しいウィンドウを作成する。
CTRL-W t           一番上のウィンドウへ移動。
CTRL-W v           カレントウィンドウを垂直分割する。新しいウィンドウの幅は N 列。
CTRL-W w           下から N 番目のウィンドウに移動。N の指定がなければ、カレントウィンドウの下のウィンドウ(なければ一番上のウィンドウ)に移動。
CTRL-W x           カレントウィンドウと上から N 番目のウィンドウ(省略時は1つ下のウィンドウ)を入れ替える。
CTRL-W z           プレビューウィンドウを閉じる。
CTRL-W |           ウィンドウの幅を N 列にする。
CTRL-W }           カーソル位置のタグをプレビューウィンドウに表示する。
CTRL-W <Down>      "CTRL-W j" と同じ。
CTRL-W <Up>        "CTRL-W k" と同じ。
CTRL-W <Left>      "CTRL-W h" と同じ。
CTRL-W <Right>    "CTRL-W l" と同じ。
###ノーマルモード
[ CTRL-D           カーソル位置の単語と一致する #define の文をカレントファイルとインクルードファイルの中から探し、最初に見つけた場所へジャンプする。カレントファイルの先頭から検索する
[ CTRL-I           カーソル位置の単語を含む行をカレントファイルの先頭から探し、最初に見つかった行へジャンプする。
[#              1  後方へ対応のとれていない #if, #else, #ifdefを探し、N 個目に見つかった場所へジャンプ。
['              1  後方の小文字マークがある行の最初の非空白文字へ移動する。
[(              1  後方へ対応のとれていない '(' を探し、N 個目に見つかった場所へジャンプする。
[*              1  "[/" と同じ。
[`              1  後方の小文字マークがある行へ移動する。
[/              1  後方へ C コメントの始まりを探し、N 個目に見つかった場所へジャンプする。
[D                 カーソル位置の単語にマッチする単語の定義をカレントファイルとインクルードファイルの中から検索し一覧表示する。カレントファイルの先頭から検索を開始する。
[I                 カーソル位置の単語にマッチする単語を含む行をカレントファイルとインクルードファイルの中から検索し一覧表示する。カレントファイルの先頭から検索を開始する。
[P              2  "[p" と同じ。
[[              1  カーソルを N 段落後方へ移動
[]              1  カーソルを N SECTION 後方へ移動
[c              1  カーソル後方へ N 個目の変更箇所へ移動
[d                 カーソル位置の単語にマッチする単語の最初の定義(#define)をカレントファイルとインクルードファイルの中から検索し表示する。カレントファイルの先頭から検索を開始する。
[f                 "gf" と同じ。
[i                 カーソル位置の単語にマッチする単語を含む最初に見つかった行をカレントファイルとインクルードファイルの中から検索し一覧表示する。カレントファイルの先頭から検索を開始する。
[m              1  後方へ N 番目に現れた関数の先頭へカーソルを移動。
[p              2  "P" と同様、さらに現在の行と同じインデントにする
[s              1  前のスペルミスのある単語へ移動
[z              1  開いている折畳の最初の行へ移動
[{              1  後方へ N 番目に現れた対応する括弧のない '{'へカーソルを移動。
[<MiddleMouse>  2  "[p" と同じ。
] CTRL-D           カーソル位置の単語にマッチする単語の最初の定義(#define)をカレントファイルとインクルードファイルの中から検索しジャンプする。カーソル位置から検索を開始する。
] CTRL-I           カーソル位置の単語にマッチする単語を含む最初に見つかった行をカレントファイルとインクルードファイルの中から検索しジャンプする。カーソル位置から検索を開始する。
]#              1  前方の対応の取れていないN個目の#endifか#else へ移動。
]'              1  前方の小文字マークがある行の最初の非空白文字へ移動する。
])              1  前方の対応の取れていないN個目の')'へ移動
]*              1  "]/" と同じ。
]`              1  前方の小文字マークがある行へ移動する。
]/              1  カーソルを N 先の C のコメントの最後へ移動。
]D                 カーソル位置の単語にマッチする単語の定義(#define)をカレントファイルとインクルードファイルの中から探して表示する。カーソル位置から検索を開始する。
]I                 カーソル位置の単語にマッチする単語を含む行をカレントファイルとインクルードファイルの中から探して表示。カーソル位置から検索を開始する。
]P              2  "[p" と同じ。
][              1  カーソルを N SECTION 前方へ移動。
]]              1  カーソルを N 段落前方へ移動。
]c              1  カーソル前方へ N 個目の変更箇所へ移動
]d                 カーソル位置の単語にマッチする単語の最初の定義(#define)をカレントファイルとインクルードファイルの中から検索し表示する。カーソル位置から検索を開始する。
]f                 "gf" と同じ。
]i                 カーソル位置の単語にマッチする単語を含む最初に見つかった行をカレントファイルとインクルードファイルの中から検索し一覧表示する。カーソル位置から検索を開始する。
]m              1  前方へ N 番目に現れた関数の末尾へカーソルを移動。
]p              2  "p" と同様、さらにカレントラインにインデントをあわせる
]s              1  次のスペルミスのある単語へ移動
]z              1  開いている折畳の最後の行へ移動
]}              1  カーソルを N 先のマッチしていない '}' へ移動。
]<MiddleMouse>  2  "]p" と同じ。
###ノーマルモード
g CTRL-A           MEM_PROFILEを定義してコンパイルしたときのみメモリプロファイルをダンプする
g CTRL-G           現在のカーソル位置に関する情報を表示。
g CTRL-H           セレクトモードで矩形選択を開始
g CTRL-]           カーソル位置のタグへ |:tjump| する。
g#              1  "#" と同様、ただし "\<" と "\>" を使用しない。
g$              1  本当の行末ではなく、表示されたとおりの、見ため上の行末へ移動
g&              2  最後に実行した":s"をすべての行で実行する
g'{mark}        1  |'|と同じだがジャンプリストを更新しない
g`{mark}        1  |`|と同じだがジャンプリストを更新しない
g*              1  "*" と同様、ただし "\<" と "\>" を使用しない。
g0              1  本当の行頭ではなく、表示されたとおりの、見ため上の行頭へ移動
g8                 UTF-8環境でカーソル位置の文字のバイト列を16進数で表示する
g<                 前のコマンドの出力を表示する。
g?              2  Rot13 エンコード演算子。
g??             2  現在の行を Rot13 エンコード。
g?g?            2  現在の行を Rot13 エンコード。
gD              1  カーソル位置の単語の定義をカレントファイル内で検索し、移動。
gE              1  直前の WORD の末尾に移動。
gH                 セレクトモードで行選択を開始。
gI              2  "I" と同様、ただし1カラム目より挿入開始。
gJ              2  スペースを挿入せずに行を連結。
["x]gP          2  (レジスタ x からの)テキストをカーソルの前に挿入、カーソルは挿入テキストの最後へ移動。
gQ                 "Ex" モードを開始する。
gR              2  仮想置換モード開始。
gU{motion}      2  Nmove テキストを大文字にする。
gV                 セレクトモードでマップやメニューを使用した後、選択していた選択範囲を再選択しない。
g]                 カーソル位置の単語をタグとして :tselectを実行する
g^              1  本当の行頭ではなく、表示されたとおりの、見ため上の行頭から最初の非空白文字へ移動
ga                 カーソル位置の文字の ASCII コード値を表示
gd              1  カーソル位置の単語の定義を現在の関数内で探し、移動
ge              1  直前の単語の末尾に移動
gf                 カーソル位置のファイル名のファイルを開く
gF                 カーソル位置のファイル名のファイルを開き、ファイル名の後に書かれた行番号にジャンプする。
gg              1  N 行目へジャンプ、省略時は1行目
gh                 セレクトモードの開始
gi              2  "i"と同じだがその前に|'^|マークへ移動する
gj              1  "j" と同様、ただし 'wrap' がオンの時はスクリーン行で N 行下へ移動
gk              1  "k" と同様、ただし 'wrap' がオンの時はスクリーン行で N 行上へ移動
gm              1  スクリーン行の中央の文字へジャンプ
go              1  バッファ中の N バイト目へジャンプ
["x]gp          2  N 回カーソルの後に(レジスタxの)テキストを挿入、カーソルは挿入テキストの直後へ移動
gq{motion}      2  Nmove テキストを整形する
gr{char}        2  N 文字を {char} で仮想上書きする
gs                 N 秒間スリープする(省略時は1秒)
gu{motion}      2  Nmove テキストを小文字にする
gv                 前回の選択範囲を再選択する
gw{motion}      2  Nmove テキストを整形する。カーソル移動なし
gx                 カーソル下のファイル名に対応したアプリケーションを起動する(|netrw| プラグインがあるときのみ)
g@{motion}         'operatorfunc'を呼ぶ。
g~{motion}      2  Nmove テキストの大文字、小文字を変換する
g<Down>         1  "gj" と同じ。
g<End>          1  "g$" と同じ。
g<Home>         1  "g0" と同じ。
g<LeftMouse>       <C-LeftMouse> と同じ。
g<MiddleMouse>     <C-MiddleMouse> と同じ。
g<RightMouse>      <C-RightMouse> と同じ。
g<Up>           1  "gk" と同じ。
###ノーマルモード
z<CR>              画面の再描画、カーソル行をウィンドウの最上部へ移動、カーソルは行のはじめの空白文字以外の文字へ移動。
z{height}<CR>      画面の再描画、ウィンドウの高さを {height}にする。
z+                 カーソルを N 行目に移動(省略時はウィンドウの下の行)、その他は "z<CR>" と同じ。
z-                 画面の再描画、カーソル行をウィンドウの最下部へ移動、カーソルは行のはじめの空白文字以外の文字へ移動。
z.                 画面の再描画、カーソル行をウィンドウの中央部へ移動、カーソルは行のはじめの空白文字以外の文字へ移動。
z=                 スペリング補完を行う。
zA                 折畳を再帰的に開閉する
zC                 折畳を再帰的に閉じる
zD                 折畳を再帰的に削除する
zE                 折畳をすべて削除する
zF                 N 行の折畳を作成する
zG                 wordを正しくスペリングされた単語としてマークする。
zM                 'foldlevel'を0に設定する
zN                 'foldenable'をオンにする
zO                 折畳を再帰的に開く
zR                 'foldlevel'を最も深い折畳と同じレベルに設定する
zW                 wordを間違ってスペリングされた単語としてマークする。
zX                 'foldlevel'を再適用する
z^                 カーソルを N 行目に移動(省略時はウィンドウの上の行)、その他は "z-" と同じ。
za                 折畳を開閉する
zb                 画面の再描画、カーソル行をウィンドウの最下部へ移動。
zc                 折畳を閉じる
zd                 折畳を削除する
ze                 'wrap' オプションがオフの時、カーソルがスクリーンの右端になるように、水平方向にスクロール。
zf{motion}         Nmoveテキストの折畳を作成する
zg                 wordを正しくスペリングされた単語としてマークする。
zh                 'wrap' オプションがオフの時、水平方向に N文字分右へスクロール。
zi                 'foldenable'を切り替える
zj              1  次の折畳の始めに移動する
zk              1  前の折畳の最後に移動する
zl                 'wrap' オプションがオフの時、水平方向に N文字分左へスクロール。
zm                 'foldlevel'を1低くする
zn                 'foldenable'をオフにする
zo                 折畳を開く
zr                 'foldlevel'を1高くする
zs                 'wrap' オプションがオフの時、カーソルがスクリーンの左端になるように、水平方向にスクロール。
zt                 画面の再描画、カーソル行をウィンドウの最上部へ移動。
zv                 カーソル行が表示されるように折畳を開く
zw                 wordを間違ってスペリングされた単語としてマークする。
zx                 'foldlevel'を最適用して"zv"を実行する
zz                 画面の再描画、カーソル行をウィンドウの中央部へ移動。
z<Left>            "zh" と同じ。
z<Right>           "zl" と同じ。
###ビジュアルモード
CTRL-\ CTRL-N    ビジュアルモードの停止
CTRL-\ CTRL-G    'insertmode'に合わせたモードに移行する
CTRL-C             ビジュアルモードの停止
CTRL-G             ビジュアルモードとセレクトモードを切り替える
<BS>            2  セレクトモードのとき: 選択範囲の内容を削除
CTRL-H          2  <BS> と同じ。
CTRL-O             セレクトモードからビジュアルモードへ1キーで移行
CTRL-V             ビジュアルモードを矩形選択にする。すでに矩形選択であれば、ビジュアルモードを終了する
<Esc>              ビジュアルモードの停止
CTRL-]             選択した文字のタグへジャンプ
!{filter}       2  選択範囲の行を外部コマンド {filter}でフィルタする
:                  選択範囲の行を対象範囲としてコマンドラインのコマンドを適用する
<               2  選択範囲の行を'shiftwidth'分だけ左へシフト
=               2  'equalprg' で設定されている外部プログラムで選択範囲の行をフィルタする
>               2  選択範囲の行を'shiftwidth'分だけ右へシフト
A               2  矩形選択のとき: 選択範囲のすべての行末に同じテキストを追加する
C               2  選択範囲の行を削除して、挿入開始
D               2  選択範囲の行を削除
I               2  矩形選択のとき: 選択範囲のすべての行頭に同じテキストを挿入する
J               2  選択範囲の行を連結
K                  選択した文字で 'keywordprg' を実行
O                  選択範囲のもう一方の端にカーソルを移動する
Q                  Ex モードに移行しない(未使用)
R               2  選択範囲の行を削除し、挿入を開始
S               2  選択範囲の行を削除し、挿入を開始
U               2  選択範囲の文字を大文字にする
V                  ビジュアルモードを行選択にする。すでに行選択であれば、ビジュアルモードを終了する
X               2  選択範囲の行を削除
Y                  選択範囲の行をヤンク
a"                 選択範囲を " で囲まれた文字列に拡大する
a'                 選択範囲を ' で囲まれた文字列に拡大する
a(                 ab と同じ。
a)                 ab と同じ。
a<                 選択範囲を < と > で囲まれた領域に拡大する。
a>                 a< と同じ。
aB                 選択範囲を { と } で囲まれた領域に拡大する。
aW                 選択範囲を"a WORD"だけ拡張する
a[                 選択範囲を [ と ] で囲まれた領域に拡大する。
a]                 a[ と同じ。
a`                 選択範囲を ` で囲まれた文字列に拡大する。
ab                 選択範囲を ( と ) で囲まれた領域に拡大する。
ap                 選択範囲を1段落に拡大する。
as                 選択範囲を1文に拡大する。
at                 選択範囲をタグブロックだけ拡大する。
aw                 選択範囲を"a word"だけ拡張する
a{                 aB と同じ。
a}                 aB と同じ。
c               2  選択範囲を削除し、挿入開始
d               2  選択範囲を削除
gJ              2  選択範囲の行をスペースを挿入せずに連結
gq              2  選択範囲の行を整形する
gv                 現在の選択範囲と直前に選択していた範囲を入れ替える
i"                 選択範囲を " で囲まれた文字列に拡大する(" は含まない)
i'                 選択範囲を ' で囲まれた文字列に拡大する(' は含まない)
i(                 ib と同じ。
i)                 ib と同じ。
i<                 選択範囲を < と > で囲まれた内側の領域に拡大する。
i>                 i< と同じ。
iB                 選択範囲を { と } で囲まれた内側の領域に拡大する。
iW                 選択範囲を"inner WORD"だけ拡張する
i[                 選択範囲を [ と ] で囲まれた内側の領域に拡大する。
i]                 i[ と同じ。
i`                 選択範囲を ` で囲まれた文字列に拡大する(`は含まない)
ib                 選択範囲を ( と ) で囲まれた内側の領域に拡大する。
ip                 選択範囲を段落の内側の領域に拡大する。
is                 選択範囲を文の内側の領域に拡大する。
it                 選択範囲をタグブロックの内側の領域に拡大する。
iw                 選択範囲を"inner word"だけ拡張する
i{                 iB と同じ。
i}                 iB と同じ。
o                  選択範囲のもう一方の端にカーソルを移動する
r               2  選択範囲の文字を削除し、挿入開始
s               2  選択範囲の文字を削除し、挿入開始
u               2  選択範囲の文字を小文字にする。
v                  ビジュアルモードを文字選択とする。すでに文字選択ならばビジュアルモードを終了する。
x               2  選択範囲の文字を削除
y                  選択範囲の文字をヤンク
~               2  選択範囲の文字の大文字小文字を切り替える
###コマンドライン編集
CTRL-@          未使用
CTRL-A          カーソル直前の文字を補完し、すべての候補を挿入
CTRL-B          カーソルをコマンドラインの先頭へ移動
CTRL-C          <Esc> と同じ。
CTRL-D          カーソル直前の文字に一致する補完候補を一覧表示
CTRL-E          カーソルをコマンドラインの末尾へ移動
CTRL-F          'cedit'が標準設定なら、コマンドラインウィンドウを開く。そうでないなら未使用
CTRL-G          未使用
<BS>            カーソル直前の文字を削除
{char1} <BS> {char2}    'digraph'がオンの時、二重字(digraph)を入力する
CTRL-H          <BS> と同じ。
<Tab>           'wildchar' が <Tab> の時: カーソル直前の文字を補完する
<S-Tab>         CTRL-P と同じ。
'wildchar'      カーソル直前の文字を補完する('wildchar'は標準設定なら<Tab>)
CTRL-I          <Tab> と同じ。
<NL>            <CR> と同じ。
CTRL-J          <CR> と同じ。
CTRL-K {char1} {char2}二重字(digraph)を入力
CTRL-L          カーソル直前の文字を補完し、最も長い候補を挿入
<CR>            入力したコマンドを実行
CTRL-M          <CR> と同じ。
CTRL-N          'wildchar' を使用して複数の補完候補があるとき:次の補完候補を表示その他: <Down> と同じ
CTRL-O          未使用
CTRL-P          'wildchar' を使用して複数の補完候補があるとき:前の補完候補を表示その他: <Up> と同じ
CTRL-Q          CTRL-V と同じ (端末制御で使用されていなければ)
CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}カーソル位置のオブジェクトまたはレジスタの内容をキー入力したかのように挿入
CTRL-R CTRL-R {0-9a-z"%#*:= CTRL-F CTRL-P CTRL-W CTRL-A}カーソル位置のオブジェクトまたはレジスタの内容を文字通りに挿入
CTRL-S          (端末制御に使用)
CTRL-T          未使用
CTRL-U          すべての文字を削除
CTRL-V          続いて入力する、数字以外の文字をそのまま挿入もしくは3桁の十進数で1バイト文字を指定して挿入
CTRL-W          カーソルより前にある単語を削除
CTRL-X          未使用 (補完機能のために予約)
CTRL-Y          モードレス選択をコピー(ヤンク)する
CTRL-Z          未使用 (サスペンド機能のために予約)
<Esc>           コマンドラインを実行せずに破棄する
CTRL-[          <Esc> と同じ。
CTRL-\ CTRL-N コマンドラインを破棄して、ノーマルモードへ移行
CTRL-\ CTRL-G コマンドラインを破棄して、'insertmode'に合わせたモードへ移行
CTRL-\ a - d    将来の拡張のために予約
CTRL-\ e {expr} コマンドラインを{expr}の結果で置き換える
CTRL-\ f - z    将来の拡張のために予約
CTRL-\ others   未使用
CTRL-]          未使用
CTRL-]          短縮入力を展開する
CTRL-^          マップ|:lmap|の有効無効を切り替える
CTRL-_          'allowrevins' がオンのとき、言語を切り替える。(ヘブライ語、ペルシア語)
<Del>           カーソル位置の文字を削除
<Left>          カーソルを左へ移動
<S-Left>        カーソルを1単語左へ移動
<C-Left>        カーソルを1単語左へ移動
<Right>         カーソルを右へ移動
<S-Right>       カーソルを1単語右へ移動
<C-Right>       カーソルを1単語右へ移動
<Up>            ヒストリの中でカーソルより前のパタンに一致する1つ前のコマンドラインを呼び出す
<S-Up>          ヒストリから1つ前のコマンドラインを呼び出す
<Down>          ヒストリの中でカーソルより前のパタンに一致する1つ次のコマンドラインを呼び出す
<S-Down>        ヒストリから1つ次のコマンドラインを呼び出す
<Home>          カーソルをコマンドラインの先頭へ移動
<End>           カーソルをコマンドラインの末尾へ移動
<PageDown>      <S-Down> と同じ。
<PageUp>        <S-Up> と同じ。
<Insert>        挿入モード/上書きモードを変更
<LeftMouse>     カーソルをマウスクリック位置へ移動
###EX コマンド
:!              行をフィルタにかける、または、外部コマンドを実行する
:!!             最後に実行した ":!" コマンドを繰り返す
:#              ":number" と同じ。
:&              最後に実行した ":substitute" を繰り返す
:*              レジスタの内容を実行する
:<              'shiftwidth' 1つ分だけ行を左へシフト
:=              カーソルのある行の行番号を表示
:>              'shiftwidth' 1つ分だけ行を右へシフト
:@              レジスタの内容を実行
:@@             直前の ":@" を繰り返す
:N[ext]         引数リストの1つ前のファイルを編集
:P[rint]        行を表示する
:X              暗号鍵を設定する
:a[ppend]       テキストを追加する
:ab[breviate]   短縮入力を登録する
:abc[lear]      すべての短縮入力を削除する
:abo[veleft]    ウィンドウが左もしくは上に分割されるようにする
:al[l]          引数リストの全ファイルをウィンドウ作成して表示
:am[enu]        すべてのモードに対してメニュー項目を追加
:an[oremenu]    すべてのモードに対して再マップされないメニュー項目を追加
:ar[gs]         引数リストを表示
:arga[dd]       引数リストにファイルを追加する
:argd[elete]    引数リストからファイルを削除する
:arge[dit]      引数リストにファイルを追加し、開く
:argdo          引数リストのすべてのファイルに対してコマンドを実行する
:argg[lobal]    グローバル引数リストを使用する
:argl[ocal]     ローカル引数リストを使用する
:argu[ment]     引数リストの指定したファイルを開く
:as[cii]        カーソル位置の文字のアスキーコードを表示
:au[tocmd]      オートコマンドの入力と表示
:aug[roup]      使用するオートコマンドグループの選択と表示
:aun[menu]      すべてのモードに対してメニュー項目を削除
:b[uffer]       バッファリストの指定したバッファを開く
:bN[ext]        バッファリストの前のバッファを開く
:ba[ll]         バッファリストのすべてのバッファをウィンドウを作成して開く
:bad[d]         バッファリストにバッファを追加
:bd[elete]      バッファリストからバッファを削除
:be[have]       マウス操作や選択の動作を設定する
:bel[owright]   ウィンドウが右もしくは下に分割されるようにする
:bf[irst]       バッファリストの最初のバッファを開く
:bl[ast]        バッファリストの最後のバッファを開く
:bm[odified]    バッファリストの次の変更済みバッファを開く
:bn[ext]        バッファリストの次のバッファを開く
:bo[tright]     ウィンドウが最も右もしくは最も下に分割されるようにする
:bp[revious]    バッファリストの前のバッファを開く
:br[ewind]      バッファリストの先頭のバッファを開く
:brea[k]        while ループを抜ける
:breaka[dd]     デバッガのブレークポイントを追加する
:breakd[el]     デバッガのブレークポイントを削除する
:breakl[ist]    デバッガのブレークポイントを一覧表示する
:bro[wse]       ファイル選択ダイアログをポップアップする
:bufdo          バッファリストのすべてのバッファに対してコマンドを実行する
:buffers        バッファリストのファイル名をリスト表示
:bun[load]      指定のバッファをアンロード
:bw[ipeout]     バッファの一切を削除する
:c[hange]       1行または連続する複数行を上書きする
:cN[ext]        直前のエラーへジャンプ
:cNf[ile]       エラーリストの前のファイルの最後のエラーへ移動する
:ca[bbrev]      コマンドラインモードを対象とする ":abbreviate"コマンド
:cabc[lear]     コマンドラインモードにおけるすべての短縮入力を削除
:caddb[uffer]   バッファからエラーを追加する
:cad[dexpr]     式からエラーを追加する
:caddf[ile]     現在のQuickFixリストにエラーメッセージを追加
:cal[l]         関数を実行する
:cat[ch]        :tryコマンドの一部
:cb[uffer]      エラーメッセージを解釈し、最初のエラーへジャンプ
:cc             指定のエラーへジャンプ
:ccl[ose]       クイックフィックスウィンドウを閉じる
:cd             ディレクトリの移動
:ce[nter]       行を中央寄せに整形
:cex[pr]        式からエラーを読みこみ、最初のエラーへジャンプ
:cf[ile]        エラーファイルを読み込み最初のエラーへジャンプ
:cfir[st]       指定のエラーへジャンプ。省略時は先頭のエラー
:cgetb[uffer]   バッファからエラーを取得する
:cgete[xpr]     式からエラーを取得する
:cg[etfile]     エラーファイルを読み込む
:ch[ange]       行を削除し、テキストを挿入
:chd[ir]        ディレクトリの移動
:che[ckpath]    インクルードファイルを一覧表示
:checkt[ime]    開いているファイルのタイムスタンプを確認する
:cl[ist]        すべてのエラーを一覧表示
:cla[st]        指定のエラーへジャンプ、省略時は最後のエラー
:clo[se]        カレントウィンドウを閉じる
:cm[ap]         コマンドラインモードを対象とする":map"コマンド
:cmapc[lear]    コマンドラインモードのすべてのマップを削除
:cme[nu]        コマンドラインモードのメニューを追加
:cn[ext]        次のエラーへジャンプ
:cnew[er]       より新しいエラーリストを使用する
:cnf[ile]       エラーリストの次のファイルの先頭エラーへジャンプ
:cno[remap]     コマンドラインモードを対象とする ":noremap"コマンド
:cnorea[bbrev]  コマンドラインモードを対象とする ":noreabbrev"コマンド
:cnoreme[nu]    コマンドラインモードを対象とする ":noremenu"コマンド
:co[py]         行のコピー
:col[der]       より古いエラーリストを使用する
:colo[rscheme]  指定した色テーマをロードする
:com[mand]      ユーザ定義コマンドの作成
:comc[lear]     すべてのユーザ定義コマンドの削除
:comp[iler]     指定したコンパイラ用の設定をする
:con[tinue]     :while に戻って実行を続ける
:conf[irm]      コマンドを実行し、ユーザの確認が必要ならプロンプトを表示する
:cope[n]        クイックフィックスウィンドウを開く
:cp[revious]    直前のエラーへジャンプ
:cpf[ile]       エラーリストの前のファイルの最後のエラーへジャンプ
:cq[uit]        Vimを終了しエラーコードを返す
:cr[ewind]      指定のエラーへジャンプ。省略時は先頭のエラー
:cs[cope]       cscope コマンドを実行
:cst[ag]        cscope を使用してタグへジャンプする
:cu[nmap]       コマンドラインモードを対象とする ":unmap" コマンド
:cuna[bbrev]    コマンドラインモードを対象とする ":unabbrev"コマンド
:cunme[nu]      コマンドラインモードのメニューを削除
:cw[indow]      クイックフィックスウィンドウを開閉する
:d[elete]       行を削除
:delm[arks]     マークを削除する
:deb[ug]        コマンドをデバッグモードで実行する
:debugg[reedy]  デバッグモードのコマンドを標準入力から読み込む
:delc[ommand]   ユーザ定義コマンドの削除
:delf[unction]  ユーザ定義関数の削除
:dif[fupdate]   'diff'バッファを更新する
:diffg[et]      カレントバッファの差異を他方に合わせる
:diffo[ff]      diff モードをオフにする
:diffp[atch]    パッチを適用した新しい差分バッファを作成する
:diffpu[t]      他方の差異をカレントバッファに合わせる
:diffs[plit]    ファイルを開きその違いを表示する
:diffthis       カレントウィンドウを差分ウィンドウにする
:dig[raphs]     二重字(digraph)の入力または表示
:di[splay]      レジスタの内容を表示
:dj[ump]        #define へジャンプ
:dl[ist]        #define をリスト表示
:do[autocmd]    カレントバッファに対しオートコマンドを適用する
:doautoa[ll]    ロードされているバッファすべてにオートコマンドを適用する
:dr[op]         指定したファイルが表示されているウィンドウにジャンプするか、カレントウィンドウで開く
:ds[earch]      マクロ定義(#define)を表示する
:dsp[lit]       ウィンドウを分割し #define へジャンプ
:e[dit]         ファイルの編集
:ea[rlier]      バッファを時間的に前の状態に戻す。アンドゥ
:ec[ho]         式の結果を表示する
:echoe[rr]      :echoと同じだが、エラー表示し、履歴に残す
:echoh[l]       echoコマンドで使用する強調表示を設定する
:echom[sg]      :echoと同じだが、履歴に残す
:echon          :echo と同じ、ただし <EOL> を出力しない
:el[se]         :if コマンドと一緒に使用する
:elsei[f]       :if コマンドと一緒に使用する
:em[enu]        名前を指定してメニューを実行
:en[dif]        直前の :if の終了
:endfo[r]       直前の :for の終了
:endf[unction]  ユーザ定義関数の終了
:endt[ry]       直前の:tryを終了する
:endw[hile]     直前の :while の終了
:ene[w]         新しい名無しバッファを開く
:ex             ":edit" と同じ。
:exe[cute]      式の結果を実行する
:exi[t]         ":xit" と同じ。
:exu[sage]      Exコマンドの概観
:f[ile]         カレントファイルの名前を設定または表示
:files          バッファリストの全ファイルを一覧表示
:filet[ype]     ファイルタイプ検出の on/off 切換
:fin[d]         'path' の中からファイルを検索し、開く
:fina[lly]      :try コマンドの一部
:fini[sh]       Vimスクリプトの読み込みを終了する
:fir[st]        引数リストの最初のファイルを開く
:fix[del]       <Del> のキーコードを設定
:fo[ld]         折畳を作成する
:foldc[lose]    折畳を閉じる
:foldd[oopen]   閉じている折畳以外の行にコマンドを実行する
:folddoc[losed] 閉じている折畳の中の行にコマンドを実行する
:foldo[pen]     折畳を開く
:for            for ループ
:fu[nction]     ユーザ定義関数を定義
:g[lobal]       パターンにマッチした行でコマンドを実行する
:go[to]         バッファ内の指定したバイト数の場所へジャンプ
:gr[ep]         'grepprg' を実行し、最初にマッチした位置へジャンプ
:grepa[dd]      :grepと同じだが、結果を現在のリストへ加える
:gu[i]          GUI をスタートする
:gv[im]         GUI をスタートする
:ha[rdcopy]     テキストをプリンタに出力する
:h[elp]         ヘルプウィンドウを表示
:helpf[ind]     ヘルプのキーワードを入力するためのダイアログをポップアップする
:helpg[rep]     ヘルプファイル検索用の":grep"
:helpt[ags]     指定したディレクトリのヘルプタグを作成する
:hi[ghlight]    強調表示を定義する
:hid[e]         コマンドを実行し、必要ならカレントバッファを隠れ(hidden)バッファにする
:his[tory]      コマンドラインの履歴を表示
:i[nsert]       テキストを挿入
:ia[bbrev]      挿入モードを対象とする ":abbrev" コマンド
:iabc[lear]     挿入モードを対象とする ":abclear" コマンド
:if             条件が成立した場合にコマンド群を実行
:ij[ump]        識別子の定義へジャンプ
:il[ist]        識別子に一致したすべての行をリスト表示
:im[ap]         挿入モードを対象とした ":map" コマンド
:imapc[lear]    挿入モードを対象とした ":mapclear" コマンド
:ime[nu]        挿入モードを対象にメニュー追加
:ino[remap]     挿入モードを対象とした ":noremap" コマンド
:inorea[bbrev]  挿入モードを対象とした ":noreabbrev" コマンド
:inoreme[nu]    挿入モードを対象とした ":noremenu" コマンド
:int[ro]        起動直後のメッセージを表示
:is[earch]      識別子と一致した最初の行を表示
:isp[lit]       ウィンドウを分割し、識別子の定義へジャンプ
:iu[nmap]       挿入モードを対象とした ":unmap" コマンド
:iuna[bbrev]    挿入モードを対象とした ":unabbrev" コマンド
:iunme[nu]      挿入モードを対象にメニュー削除
:j[oin]         行の結合
:ju[mps]        ジャンプリストの表示
:k              マークを設定
:keepa[lt]      代替ファイルを変更せずにコマンドを実行する
:kee[pmarks]    マークを変更せずにコマンドを実行する
:keepj[umps]    マークやジャンプリストを変更せずにコマンドを実行する
:lN[ext]        ロケーションリストの前の項目の位置へ移動
:lNf[ile]       前のファイルの最後の項目の位置へ移動
:l[ist]         行を表示
:lad[dexpr]     exprからロケーションリストの項目を追加
:laddb[uffer]   バッファからロケーションリストの項目を追加
:laddf[ile]     現在のロケーションリストに項目を追加
:la[st]         引数リストの最後のファイルを編集
:lan[guage]     言語(ロケール)を設定する
:lat[er]        バッファを時間的に新しい状態に戻す。リドゥ
:lb[uffer]      バッファからロケーションリストを解釈し、最初のエラーへジャンプ
:lc[d]          ウィンドウのカレントディレクトリを変更する
:lch[dir]       ウィンドウのカレントディレクトリを変更する
:lcl[ose]       ロケーションウィンドウを閉じる
:lcs[cope]      ":cscope"と同様だがロケーションリストを使う
:le[ft]         行を左寄せに整形
:lefta[bove]    ウィンドウが左もしくは上に分割されるようにする
:let            変数またはオプションに値を設定する
:lex[pr]        式からロケーションリストを読み込み、最初のエラーへジャンプする
:lf[ile]        ファイルからロケーションリストを読み込み、最初のエラーへジャンプする
:lfir[st]       指定されたロケーションへジャンプする。デフォルトは最初のロケーション。
:lgetb[uffer]   バッファからロケーションリストを取得する
:lgete[xpr]     式からロケーションリストを取得する
:lg[etfile]     ファイルからロケーションリストを取得する
:lgr[ep]        'grepprg'を実行し、最初のマッチへジャンプする
:lgrepa[dd]     :grepと同様だが現在のリストに追加する
:lh[elpgrep]    ":helpgrep"と同様だがロケーションリストを使う
:ll             特定のロケーションへ移動する
:lla[st]        特定のロケーションへ移動する。デフォルトは最後のロケーション
:lli[st]        全てのロケーションをリストする
:lmak[e]        外部プログラム'makeprg'を実行、エラーメッセージを解釈する。
:lm[ap]         ":map!"と同だが、Lang-Argモードも対象
:lmapc[lear]    ":mapclear!"と同じだが、Lang-Argモードも対象
:lne[xt]        次のロケーションへ移動
:lnew[er]       新しいロケーションリストへ移動
:lnf[ile]       次のファイルの最初のロケーションへ移動
:ln[oremap]     ":noremap!"と同じだが、Lang-Argモードも対象
:loadk[eymap]   次の行からEOFまでキーマップをロードする
:lo[adview]     カレントウィンドウにビューを読み込む
:loc[kmarks]    マークを調整せずにコマンドを実行する
:lockv[ar]      変数をロックする
:lol[der]       以前のロケーションリストへ移動
:lope[n]        ロケーションウィンドウを開く
:lp[revious]    前のロケーションへ移動
:lpf[ile]       前のファイルの最後のロケーションへ移動
:lr[ewind]      指定されたロケーションへ移動。デフォルトは最初のロケーション
:ls             すべてのバッファを表示
:lt[ag]         タグへジャンプし、マッチしたタグをロケーションリストに追加する
:lu[nmap]       ":unmap!"と同じだが、Lang-Argモードも対象
:lua            |Lua| コマンドを実行
:luad[o]        各行に対して Lua コマンドを実行
:luaf[ile]      |Lua| スクリプトファイルを実行
:lv[imgrep]     ファイルからパターンを検索する
:lvimgrepa[dd]  :vimgrepと同様だが、ロケーションリストに追加する
:lw[indow]      ロケーションウィンドウを開閉する
:m[ove]         行を移動する
:ma[rk]         マークを設定
:mak[e]         外部プログラム'makeprg'を実行し、エラーメッセージを解釈する
:map            マップの設定または表示
:mapc[lear]     ノーマルモードとビジュアルモードを対象にマップをクリア
:marks          すべてのマークを表示
:mat[ch]        指定したパターンの文字を強調表示する
:me[nu]         新しいメニュー項目を追加
:menut[ranslate] 翻訳したメニュー項目を追加する
:mes[sages]     直前に表示されたメッセージの表示
:mk[exrc]       現在のマップと設定をファイルに書き出す
:mks[ession]    セッション情報をファイルに書き出す
:mksp[ell]      スペルファイル .splを生成する
:mkvie[w]       カレントウィンドウのビューをファイルに保存する
:mkv[imrc]      現在のマップと設定をファイルに書き出す
:mod[e]         スクリーンモードを表示または変更する
:mz[scheme]     MzSchemeコマンドを実行する
:mzf[ile]       MzSchemeスクリプトファイルを実行する
:nbc[lose]      現在の Netbeans セッションを閉じる
:nbs[art]       新しい Netbeans セッションを開始する
:nb[key]        キーをNetbeansに渡す
:n[ext]         引数リストの次のファイルを開く
:new            新規に空のウィンドウを作成する
:nm[ap]         ノーマルモードを対象とする ":map" コマンド
:nmapc[lear]    ノーマルモードのすべてのマップを削除する
:nme[nu]        ノーマルモードのメニューを追加する
:nn[oremap]     ノーマルモードを対象とする ":noremap" コマンド
:nnoreme[nu]    ノーマルモードを対象とする ":noremenu" コマン
:noa[utocmd]    自動コマンドを実行せずにコマンドを実行する
:no[remap]      再マップされないマップを定義する
:noh[lsearch]   一時的に'hlsearch'の強調表示をやめる
:norea[bbrev]   再マップされない短縮入力を定義する
:noreme[nu]     再マップされないメニューを定義する
:norm[al]       ノーマルモードのコマンドを実行する
:nu[mber]       行番号を表示
:nun[map]       ノーマルモードを対象とする ":unmap" コマンド
:nunme[nu]      ノーマルモードのメニューを削除
:ol[dfiles]     viminfo ファイルに記録されたマークを持つファイルを表示する
:o[pen]         openモードを開始(未実装)
:om[ap]         Operator-pending モードを対象とする ":map"コマンド
:omapc[lear]    Operator-pending モードのマップをすべて削除
:ome[nu]        Operator-pending モードのメニューを追加
:on[ly]         カレントウィンドウ以外のウィンドウをすべて閉じる
:ono[remap]     Operator-pending モードを対象とする ":noremap"コマンド
:onoreme[nu]    Operator-pending モードを対象とする":noremenu" コマンド
:opt[ions]      オプションウィンドウを開く
:ou[nmap]       Operator-pending モードを対象とした ":unmap"コマンド
:ounme[nu]      Operator-pending モードのメニューを削除
:ow[nsyntax]    ウィンドウのローカル構文強調を新たに設定する
:pc[lose]       プレビューウィンドウを閉じる
:ped[it]        プレビューウィンドウでファイルを開く
:pe[rl]         Perl コマンドを実行
:p[rint]        行単位で印刷する
:profd[el]      関数やスクリプトのプロファイリングを停止する
:prof[ile]      関数やスクリプトのプロファイリングをする
:pro[mptfind]   GUIの検索ダイアログを開く
:promptr[epl]   GUIの検索・置換ダイアログを開く
:perld[o]       1行ずつ Perl コマンドを実行
:po[p]          タグスタックの1つ古いエントリへジャンプ
:pop[up]        指定した名前のメニューをポップアップ表示する
:pp[op]         プレビューウィンドウで ":pop" を実行
:pre[serve]     すべてのテキストをスワップファイルに書き出す
:prev[ious]     引数リスト中の前のファイルを読み込む
:ps[earch]      ":ijump"と同じだが、結果をプレビューウィンドウで表示する
:pt[ag]         プレビューウィンドウでタグを表示
:ptN[ext]       プレビューウィンドウで |:tNext| を実行
:ptf[irst]      プレビューウィンドウで|:trewind| を実行
:ptj[ump]       プレビューウィンドウで |:tjump| を実行、タグを表示
:ptl[ast]       プレビューウィンドウで |:tlast| を実行
:ptn[ext]       プレビューウィンドウで |:tnext| を実行
:ptp[revious]   プレビューウィンドウで |:tprevious| を実行
:ptr[ewind]     プレビューウィンドウで |:trewind| を実行
:pts[elect]     プレビューウィンドウで |:tselect| を実行、タグを表示
:pu[t]          テキストにレジスタの内容を挿入
:pw[d]          カレントディレクトリを表示
:py3            Python 3 コマンドを実行
:python3        :py3 と同じ
:py3f[ile]      Python 3 スクリプトファイルを実行
:py[thon]       Python コマンドを実行
:pyf[ile]       Python スクリプトファイルを実行
:q[uit]         カレントウィンドウを閉じる(ウィンドウが1つならVim を終了)
:quita[ll]      Vim を終了
:qa[ll]         Vim を終了
:r[ead]         テキストにファイルを挿入
:rec[over]      スワップファイルからファイルを復元
:red[o]         1回のアンドゥをリドゥする
:redr[aw]       画面を再描画する
:redraws[tatus] ステータスラインを再描画する
:redi[r]        ファイルまたはレジスタにメッセージをリダイレクトする
:reg[isters]    レジスタの内容を表示
:res[ize]       カレントウィンドウの高さを変更
:ret[ab]        タブの大きさを変更
:retu[rn]       ユーザファンクションからリターンする
:rew[ind]       引数リストの先頭のファイルを開く
:ri[ght]        テキストを右寄せに整形
:rightb[elow]   ウィンドウが右もしくは下に分割されるようにする
:rub[y]         Rubyのコマンドを実行する
:rubyd[o]       各行に対してRubyのコマンドを実行する
:rubyf[ile]     Rubyスクリプトファイルを実行する
:rund[o]        アンドゥ情報をファイルから読み込む
:ru[ntime]      Vimスクリプトを'runtimepath'から探して実行する
:rv[iminfo]     viminfo ファイルを読み込む
:s[ubstitute]   テキストの置換
:sN[ext]        ウィンドウを分割して、引数リストの前のファイルを開く
:san[dbox]      サンドボックスでコマンドを実行する
:sa[rgument]    ウィンドウを分割して、引数リストの指定ファイルを開く
:sal[l]         引数リストのすべてのファイルをウィンドウを作成して開く
:sav[eas]       別の名前でファイルを保存する
:sb[uffer]      ウィンドウを分割してバッファリストの指定したバッファを開く
:sbN[ext]       ウィンドウを分割してバッファリストの前のバッファを開く
:sba[ll]        バッファリストのすべてのバッファをウィンドウを作成して開く
:sbf[irst]      ウィンドウを分割してバッファリストの最初のバッファを開く
:sbl[ast]       ウィンドウを分割してバッファリストの最後のバッファを開く
:sbm[odified]   ウィンドウを分割してバッファリストの変更済みバッファを開く
:sbn[ext]       ウィンドウを分割してバッファリストの次のバッファを開く
:sbp[revious]   ウィンドウを分割してバッファリストの前のバッファを開く
:sbr[ewind]     ウィンドウを分割してバッファリストの最初のバッファを開く
:scrip[tnames]  実行済みVimスクリプトの名前を一覧表示する
:scripte[ncoding]     Vimスクリプトが使用しているエンコーディングを指定する
:scs[cope]      ウィンドウを分割してcscopeコマンドを実行する
:se[t]          オプションを表示または設定する
:setf[iletype]  まだ設定されていなければ'filetype'を設定する
:setg[lobal]    グローバルオプションを表示もしくは設定する
:setl[ocal]     ローカルオプションを表示もしくは設定する
:sf[ind]        ウィンドウを分割して、'path' にあるファイルを開く
:sfir[st]       ウィンドウを分割して引数リストの最初のファイルを開く
:sh[ell]        シェルを実行する
:si[malt]       Win32 GUI: Windows ALT キーをシミュレートする
:sig[n]         目印を取り扱うコマンド
:sil[ent]       実行したコマンドの出力を抑制する
:sl[eep]        数秒間なにもしない
:sla[st]        ウィンドウを分割して引数リストの最後のファイルを開く
:sm[agic]       'magic' オプションの下で :substitute を実行
:sma[p]         ":map"と同様。選択モード用
:smapc[lear]    選択モードのすべてのマップを削除する
:sme[nu]        選択モードのメニューを追加する
:sn[ext]        ウィンドウを分割して引数リストの次のファイルを開く
:sni[ff]        sniffにリクエストを送信する
:sno[magic]     'nomagic' オプションの下で :substitute を実行
:snor[emap]     ":noremap"と同様。選択モード用
:snoreme[nu]    ":noremenu"と同様。選択モード用
:sor[t]         行をソートする
:so[urce]       Vim or Ex コマンドをファイルから読み込む
:spelld[ump]    ウィンドウを分割し、正しい単語を列挙する
:spe[llgood]    スペルチェック用に正しい単語を登録する
:spelli[nfo]    読み込んでいるスペルファイルの情報を表示する
:spellr[epall]  最後の|z=|と同様にすべての間違った単語を置換
:spellu[ndo]    正しいまたは間違った単語を削除
:spellw[rong]   スペリングの間違いを登録する
:sp[lit]        カレントウィンドウを分割
:spr[evious]    ウィンドウを分割して引数リストの前のファイルを開く
:sre[wind]      ウィンドウを分割して引数リストの最初のファイルを開く
:st[op]         Vimをサスペンドする
:sta[g]         ウィンドウを分割して、タグへジャンプする
:star[tinsert]  挿入モードを開始する
:startg[replace] バーチャル上書きモードを開始する
:startr[eplace] 上書きモードを開始する
:stopi[nsert]   挿入モードを終了する
:stj[ump]       ウィンドウを分割して、":tjump" を実行
:sts[elect]     ウィンドウを分割して、":tselect" を実行
:sun[hide]      ":unhide" と同じ。
:sunm[ap]       ":unmap"と同様。選択モード用
:sunme[nu]      選択モードのメニューを削除する
:sus[pend]      ":stop" と同じ。
:sv[iew]        ウィンドウを分割してファイルを読み込み専用で開く
:sw[apname]     現在のスワップファイルの名前を表示
:sy[ntax]       構文強調表示 (syntax highlighting)
:sync[bind]     ウィンドウのスクロール状態を同期する
:t              ":copy" と同じ。
:tN[ext]        後方へ検索し一致したタグ位置へジャンプ
:tabN[ext]      前のタブページへ移動
:tabc[lose]     現在のタブページを閉じる
:tabdo          各タブページでコマンドを実行する
:tabe[dit]      新しいタブページでファイルを開く
:tabf[ind]      'path'からファイルを探し新しいタブページで開く
:tabfir[st]     最初のタブページへ移動
:tabl[ast]      最後のタブページへ移動
:tabm[ove]      タブページの位置を移動
:tabnew         新しいタブページでファイルを編集する
:tabn[ext]      次のタブページへ移動
:tabo[nly]      現在のタブページ以外をすべて閉じる
:tabp[revious]  前のタブページへ移動
:tabr[ewind]    最初のタブページへ移動
:tabs           タブページとその中身を列挙
:tab            新しいウィンドウを開くとき新しいタブを作る
:ta[g]          タグを検索しジャンプする
:tags           タグスタックの内容を表示
:tc[l]          Tcl コマンドを実行
:tcld[o]        各行の Tcl コマンドを実行
:tclf[ile]      Tcl スクリプトファイルを実行
:te[aroff]      メニューを切り離す
:tf[irst]       複数一致した内の最初のタグへジャンプ
:th[row]        例外を投げる
:tj[ump]        ":tselect" と同様、ただし一致したタグが1つしかない場合、その場所へジャンプ
:tl[ast]        直前に一致したタグ位置へジャンプ
:tm[enu]        ツールチップメニューを定義する
:tn[ext]        タグを前方検索し、ジャンプ
:tp[revious]    タグを後方検索し、ジャンプ
:to[pleft]      ウィンドウが最も左もしくは最も上に分割されるようにする
:tr[ewind]      最初に一致したタグ位置へジャンプ
:ts[elect]      一致したタグを一覧表示し、ジャンプ先のタグを選択
:tu[nmenu]      ツールチップメニューを削除
:try            コマンドを実行し発生したエラーや例外を処理する
:u[ndo]         最後の変更を取り消す
:undoj[oin]     次の変更を前のアンドゥブロックと連結する
:undol[ist]     アンドゥツリーのリーフを列挙する
:una[bbreviate] 短縮入力を削除
:unh[ide]       バッファリストのメモリにロードされているすべてのバッファをウィンドウを作成して開く
:unl[et]        変数を削除
:unlo[ckvar]    変数をアンロックする
:unm[ap]        マップを削除
:unme[nu]       メニューを削除
:uns[ilent]     コマンドを silent でなく実行する
:up[date]       バッファ内容が変更されていれば、ファイルに書き出す
:v[global]      パターンにマッチしない行でコマンドを実行する
:ve[rsion]      バージョン番号その他の情報を表示
:verb[ose]      'verbose'を一時設定してコマンドを実行する
:vert[ical]     ウィンドウが垂直分割されるようにする
:vim[grep]      複数ファイルからパターンを検索する
:vimgrepa[dd]   :vimgrepと同様だが現在のリストに追加
:vi[sual]       ":edit" と同じ、ただし "Ex" モードから抜ける。
:viu[sage]      ノーマルモードコマンドの概観
:vie[w]         読み込み専用でファイルを開く
:vm[ap]         ビジュアル・セレクトモードを対象とする ":map" コマンド
:vmapc[lear]    ビジュアル・セレクトモードのマッピングをすべて削除
:vme[nu]        ビジュアル・セレクトモードのメニューを追加
:vne[w]         新しいウィンドウを垂直分割して作る
:vn[oremap]     ビジュアル・セレクトモードを対象とする ":noremap"コマンド
:vnoreme[nu]    ビジュアル・セレクトモードを対象とする ":noremenu"コマンド
:vs[plit]       カレントウィンドウを垂直分割する
:vu[nmap]       ビジュアル・セレクトモードを対象とする ":unmap" コマンド
:vunme[nu]      ビジュアルモードのメニューを削除
:windo          各ウィンドウに対してコマンドを実行する
:w[rite]        ファイルに保存
:wN[ext]        ファイルに保存して、引数リストの直前のファイルを開く
:wa[ll]         （変更した）すべてのバッファを保存
:wh[ile]        与えた条件を満たしている限りループする
:wi[nsize]      ウィンドウサイズを取得もしくはセットする（古いコマンド）
:winp[os]       ウィンドウの位置を取得もしくはセットする
:winc[md]       ウィンドウコマンド(CTRL-W)を実行する
:wn[ext]        ファイルに保存して、引数リストの次のファイルを開く
:wp[revious]    ファイルに保存して、引数リストの直前のファイルを開く
:wq             ファイルに保存して、ウィンドウもしくは Vim を終了
:wqa[ll]        すべての変更済みバッファを保存し、Vim を終了
:wu[ndo]        アンドゥ情報をファイルに保存する
:wv[iminfo]     viminfo ファイルに保存
:ws[verb]       workshopに命令をIPCで送信する
:x[it]          バッファが変更されていたら保存し、ウィンドウもしくは Vim を終了
:xa[ll]         ":wqall" と同じ。
:xmapc[lear]    ビジュアルモード時のマッピングを全て削除する
:xm[ap]         ":map"と同様。ビジュアルモード用
:xme[nu]        ビジュアルモード時にメニューを追加する
:xn[oremap]     ":noremap"と同様。ビジュアルモード用
:xnoreme[nu]    ":noremenu"と同様。ビジュアルモード用
:xu[nmap]       ":unmap"と同様。ビジュアルモード用
:xunme[nu]      ビジュアルモード時にメニューを削除する
:y[ank]         行をレジスタへヤンク
:z              行を表示
:~              直前に実行した ":substitute" を実行
EOF

@lines.each do |line|
  if /^###/ =~ line
    label = line.sub /###/, ""
    @mode = Mode.where(label: label).first_or_create!
  elsif m = /^(?<command>([\x21-\x7e]+ ?)+)(?<desc>.+)/.match(line)
    command = m["command"].strip
    desc = m["desc"].strip
    desc = desc.sub(/^\d +/, "")
    if desc.strip.empty? || /^未使用/ =~ desc
      next
    end
    puts "Mode: #{@mode.label} Create Command:#{command} - #{desc}"
    @mode.vim_commands.create! command: command, description: desc, language: 'jp'
  end
end
